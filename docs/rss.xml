<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Computer Scientist</title><link>https://nuowoo.github.io/blog</link><description>I am a researcher and computer scientist. I used to work in San Francisco, then I traveled a bit</description><copyright>Computer Scientist</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://nuowoo.github.io/blog</link></image><lastBuildDate>Thu, 10 Oct 2024 06:46:47 +0000</lastBuildDate><managingEditor>Computer Scientist</managingEditor><ttl>60</ttl><webMaster>Computer Scientist</webMaster><item><title>Demonstrating Operational Data with SQL</title><link>https://nuowoo.github.io/blog/post/Demonstrating%20Operational%20Data%20with%20SQL.html</link><description>&#13;
Databases, Big Data, and Stream Processors have long had the property that it can be hard to *demonstrate* their value, like in a demo setting.&#13;
Databases coordinate the work of multiple teams of independent workers, and don't shine when there is just one user.&#13;
Big Data systems introduce scalable patterns that can be purely overhead when the data fit on a single laptop.&#13;
Stream Processors aim to get the lowest of end-to-end latencies, but do nothing of any consequence on static data.&#13;
These systems demonstrate value when you have variety, volume, and velocity, and most demo data sets have none of these.&#13;
&#13;
Materialize, an operational data warehouse backed by scalable streaming systems, has all three of these challenges!&#13;
&#13;
Fortunately, Materialize is powerful enough to synthesize its own operational data for demonstration purposes.&#13;
In this post, we'll build a recipe for a generic live data source using standard SQL primitives and some Materialize magic.&#13;
We'll then add various additional flavors: distributions over keys, irregular validity, foreign key relationships.&#13;
It's all based off of Materialize's own [auction load generator](https://materialize.com/docs/sql/create-source/load-generator/#auction), but it's written entirely in SQL and something that I can customize as my needs evolve.&#13;
&#13;
The thing I find most amazing here is that with just SQL you can create *live* data. &#13;
Data that comes and goes, changes, and respects invariants as it does.&#13;
And that the gap between your idea for live data and making it happen is just typing some SQL.&#13;
&#13;
### My Motivation: Materialize&#13;
&#13;
Materialize has a few product beats it wants to hit when we demo it, derived from our product principles.&#13;
&#13;
* **Responsiveness**: Materialize should be able to get back to you ASAP, even with lots of data involved.&#13;
* **Freshness**: Materialize should reflect arbitrary updates almost immediately, even through complex logic.&#13;
* **Consistency**: Materialize's outputs should always reflect a consistent state, even across multiple users and views.&#13;
&#13;
We want to get folks to that 'aha!' moment where they realize that Materialize is like no other technology they know of.&#13;
Until that moment, Materialize could just be a trenchcoat containing Postgres, Spark, and Flink stacked according to your preferences.&#13;
&#13;
Of course, different contexts connect for different users.&#13;
Some folks think about transactions and fraud and want to see how to get in front of that.&#13;
Others have users of their own, and know that sluggish, stale, inconsistent results are how they lose their users, and want to feel the lived experience.&#13;
Many users won't believe a thing until the data looks like their data, with the same schemas and data distributions, and the same business logic.&#13;
These are all legitimate concerns, and to me they speak to the inherent *heterogeneity* involved in demonstrating something.&#13;
&#13;
I want to be able to demonstrate Materialize more **effectively**, which is some amount tied up in demonstrating it more **flexibly**.&#13;
&#13;
As a personal first, I'm going to try telling the story in reverse order, Memento-style.&#13;
We'll start with the outcomes, which I hope will make sense, and then figure out how we got there, and eventually arrive at the wall of SQL that makes it happen.&#13;
It does mean we'll need some suspension of disbelief as we go, though; bear with me!&#13;
I do hope that whichever prefix you can tolerate makes sense and is engaging, and am only certain that if we started with the SQL it would not be.&#13;
&#13;
The outine is, roughly:&#13;
&#13;
1.  [Demonstrating Materialize with auction data](https://github.com/frankmcsherry/blog/blob/master/posts/2024-05-19.md#demonstrating-materialize)&#13;
&#13;
    We'll work through Materialize's quick start to show off `auctions` and `bids` data, and give a feel for what we need to have our live data do.&#13;
    We're going to hit the beats of responsiveness, freshness, and consistency along the way.&#13;
&#13;
2.  [Building an Auction loadgen from unrelated live data](https://github.com/frankmcsherry/blog/blob/master/posts/2024-05-19.md#auction-data-from-changing-moments)&#13;
&#13;
    Here we'll build live views that define `auctions` and `bids`, starting from a live view that just contains recent timestamps.&#13;
    We'll see how to turn largely nonsense data into plausible auctions and bids, through the magic of pseudorandomness.&#13;
&#13;
3.  [Building live random data from just SQL](https://github.com/frankmcsherry/blog/blob/master/posts/2024-05-19.md#operational-data-from-thin-air)&#13;
&#13;
    Starting from nothing more than SQL, we'll create a live view that Materialize can maintain containing recent moments as timestamps.&#13;
    As time continually moves forward, those moments continually change.&#13;
&#13;
4.  [All the SQL](https://github.com/frankmcsherry/blog/blob/master/posts/2024-05-19.md#appendix-all-the-sql) Really, just SQL.&#13;
&#13;
Feel more than welcome to leap to the sections that interest you most.&#13;
I recommend starting at the beginning, though!&#13;
&#13;
### Demonstrating Materialize&#13;
&#13;
Let's sit down with Materialize and some live auction data and see if we can't hit the beats of responsiveness, freshness, and consistency.&#13;
The story is borrowed from our own quickstart, but by the end of it we'll find we've swapped out the quickstart's built-in load generator.&#13;
&#13;
Materialize's [`AUCTION` load generator](https://materialize.com/docs/sql/create-source/load-generator/#auction) populates `auctions` and `bids` tables.&#13;
Their contents look roughly like so:&#13;
```&#13;
materialize=&gt; select * from auctions;&#13;
 id | seller |        item        |          end_time          &#13;
----+--------+--------------------+----------------------------&#13;
  2 |   1592 | Custom Art         | 2024-05-20 13:43:16.398+00&#13;
  3 |   1411 | City Bar Crawl     | 2024-05-20 13:43:19.402+00&#13;
  1 |   1824 | Best Pizza in Town | 2024-05-20 13:43:06.387+00&#13;
  4 |   2822 | Best Pizza in Town | 2024-05-20 13:43:24.407+00&#13;
  ...&#13;
(4 rows)&#13;
```&#13;
```&#13;
materialize=&gt; select * from bids;&#13;
 id | buyer | auction_id | amount |          bid_time          &#13;
----+-------+------------+--------+----------------------------&#13;
 31 |    88 |          3 |     67 | 2024-05-20 13:43:10.402+00&#13;
 10 |  3844 |          1 |     59 | 2024-05-20 13:42:56.387+00&#13;
 11 |  1861 |          1 |     40 | 2024-05-20 13:42:57.387+00&#13;
 12 |  3338 |          1 |     97 | 2024-05-20 13:42:58.387+00&#13;
 ...&#13;
```&#13;
&#13;
We will root around in this data, as it changes, and show off Materialize as something unlike other data tools.&#13;
Specifically we'll want to show off responsiveness, freshness, and consistency, which we'll do in that order.&#13;
However, the point is that you get them all at the same time, rather than one at a time, and by the end we should be able to see all three at once.&#13;
&#13;
#### Beat 1: Responsiveness&#13;
&#13;
Materialize is able to respond immediately, even to complex queries over large volumes of data.&#13;
Let's start by looking at the data, counting the number of auctions and the number of bids.&#13;
```&#13;
materialize=&gt; select count(*) from auctions;&#13;
 count &#13;
-------&#13;
 86400&#13;
(1 row)&#13;
&#13;
Time: 52.580 ms&#13;
```&#13;
```&#13;
materialize=&gt; select count(*) from bids;&#13;
  count   &#13;
----------&#13;
 10994252&#13;
(1 row)&#13;
&#13;
Time: 8139.897 ms (00:08.140)&#13;
```&#13;
It's almost 100k auctions, and over 10M bids across them.&#13;
The specific numbers will make more sense when we get to the generator, but some of you may already recognize 86,400.&#13;
Ten seconds to count ten million things is not great, but this is running on our smallest instance (`25cc`; roughly 1/4 of a core).&#13;
Also, we aren't yet using Materialize's super-power to *maintain* results.&#13;
&#13;
Materialize maintains computed results in indexes, created via the `CREATE INDEX` command.&#13;
```sql&#13;
-- Maintain bids indexed by id.&#13;
CREATE INDEX bids_id ON bids (id);&#13;
```&#13;
&#13;
When we want to find a specific bid by id, this can be very fast .&#13;
```&#13;
materialize=&gt; select * from bids where id = 4;&#13;
 id | buyer | auction_id | amount |        bid_time        &#13;
----+-------+------------+--------+------------------------&#13;
  4 |   228 |    6492730 |    149 | 2024-06-19 13:57:50+00&#13;
(1 row)&#13;
&#13;
Time: 19.711 ms&#13;
```&#13;
Inspecting the query history (a feature in Materialize's console) we can see it only took 5ms for the DB, and the additional latency is between NYC and AWS's us-east-1.&#13;
This really is just a look-up into a maintained index, admittedly only on `bids` rather than some sophisticated query.&#13;
&#13;
You can build indexes on any collection of data, not just raw data like `bids`.&#13;
We could build an index on `SELECT COUNT(*) FROM bids` to make that fast too, for example.&#13;
Instead, let's go straight to the good stuff.&#13;
&#13;
Here's a view that determines which auctions are won by which bids.&#13;
```sql&#13;
-- Determine auction winners: the greatest bid before expiration.&#13;
CREATE VIEW winning_bids AS&#13;
  SELECT DISTINCT ON (auctions.id) bids.*,&#13;
    auctions.item,&#13;
    auctions.seller&#13;
  FROM auctions, bids&#13;
  WHERE auctions.id = bids.auction_id&#13;
    AND bids.bid_time &lt; auctions.end_time&#13;
    AND mz_now() &gt;= auctions.end_time&#13;
  ORDER BY auctions.id,&#13;
    bids.amount DESC,&#13;
    bids.bid_time,&#13;
    bids.buyer;&#13;
```&#13;
&#13;
Directly querying this view results in a not-especially-responsive experience&#13;
```&#13;
materialize=&gt; select auction_id, buyer, amount from winning_bids limit 5;&#13;
 auction_id | buyer | amount &#13;
------------+-------+--------&#13;
        217 |    41 |    252&#13;
       3328 |   209 |     55&#13;
      19201 |   147 |    255&#13;
      18947 |    34 |    254&#13;
       7173 |   143 |      5&#13;
(5 rows)&#13;
&#13;
Time: 87428.589 ms (01:27.429)&#13;
```&#13;
We are grinding through all the bids from scratch when you select from a view, because the view only explains what query you want to run.&#13;
A view by itself doesn't cause any work to be done ahead of time.&#13;
&#13;
However, we can create indexes on `winning_bids`, and once they are up and running everything gets better.&#13;
We are going to create two indexes, on the columns `buyer` and `seller`, for future storytelling reasons.&#13;
```sql&#13;
-- Compute and maintain winning bids, indexed two ways.&#13;
CREATE INDEX wins_by_buyer ON winning_bids (buyer);&#13;
CREATE INDEX wins_by_seller ON winning_bids (seller);&#13;
```&#13;
The auctions aren't faster to magic in to existence than the original query was, so we'll have to wait a moment for them to hydrate.&#13;
Once this has happened, you get responsive interactions with the view.&#13;
```&#13;
materialize=&gt; select auction_id, buyer, amount from winning_bids limit 5;&#13;
 auction_id | buyer | amount &#13;
------------+-------+--------&#13;
    7647534 |     0 |    254&#13;
    6568079 |     0 |    239&#13;
   10578840 |     0 |    254&#13;
   14208479 |     0 |    249&#13;
   15263465 |     0 |    199&#13;
(5 rows)&#13;
&#13;
Time: 61.283 ms&#13;
```&#13;
Rather than grind over the ten million or so bids to find winners, the ~80,000 results are maintained and its easy to read the first five.&#13;
Moreover, the results are all immediately up to date, rather than being fast-but-stale.&#13;
Let's hit that **freshness** beat now!&#13;
&#13;
&lt;!-- &#13;
In addition, our indexes set us up for responsive ad-hoc queries.&#13;
Here's an example where we look for 'auction flippers': folks who are both buyers and sellers of the same item at increased amounts:&#13;
```sql&#13;
-- Look for users who re-sell their winnings&#13;
CREATE VIEW potential_flips AS&#13;
  SELECT w2.seller,&#13;
         w2.item AS item,&#13;
         w2.amount AS seller_amount,&#13;
         w1.amount AS buyer_amount&#13;
  FROM winning_bids w1,&#13;
       winning_bids w2&#13;
  WHERE w1.buyer = w2.seller&#13;
    AND w2.amount &gt; w1.amount&#13;
    AND w1.item = w2.item;&#13;
```&#13;
&#13;
We have enough auctions that some folks will be both buyers and sellers, and for some fraction of them its the same item for an increased price.&#13;
```&#13;
materialize=&gt; select count(*) from potential_flips;&#13;
 count &#13;
-------&#13;
  9755&#13;
(1 row)&#13;
&#13;
Time: 602.481 ms&#13;
```&#13;
```&#13;
materialize=&gt; select seller, count(*) from potential_flips group by seller order by count(*) desc limit 5;&#13;
 seller | count &#13;
--------+-------&#13;
  42091 |     7&#13;
  42518 |     6&#13;
  10529 |     6&#13;
  39840 |     6&#13;
  49317 |     6&#13;
(5 rows)&#13;
&#13;
Time: 678.330 ms&#13;
```&#13;
&#13;
This is now pretty interactive, using scant resources, over enough data and through complex views that to start from scratch would be exhausting.&#13;
However, maintained indexes keep intermediate results up to date, and you get the same results as if re-run from scratch, just without the latency. --&gt;&#13;
&#13;
#### Beat 2: Freshness&#13;
&#13;
All of this auction data is synthetic, and while it changes often the show is pretty clearly on rails.&#13;
That is, Materialize knows ahead of time what the changes will be.&#13;
You want to know that Materialize can respond fast to *arbitrary* changes, including ones that Materialize doesn't anticipate.&#13;
&#13;
We need **interaction**!&#13;
&#13;
Let's create a table we can modify, through our own whims and fancies.&#13;
Our modifications to this table, not part of the load generator, will be how we demonstrate the speed at which Materialize updates results as data change.&#13;
```sql&#13;
-- Accounts that we might flag for fraud.&#13;
CREATE TABLE fraud_accounts (id bigint);&#13;
```&#13;
&#13;
Let's look at a query that calls out the top five accounts that win auctions.&#13;
We'll subscribe to it, meaning we get to watch the updates as they happen.&#13;
```sql&#13;
-- Top five non-fraud accounts, by auction wins.&#13;
COPY (SUBSCRIBE TO (&#13;
  SELECT buyer, count(*)&#13;
  FROM winning_bids&#13;
  WHERE buyer NOT IN (SELECT id FROM fraud_accounts)&#13;
  GROUP BY buyer&#13;
  ORDER BY count(*) DESC, buyer LIMIT 5&#13;
)) TO STDOUT;&#13;
```&#13;
This produces first a snapshot and then a continual stream of updates.&#13;
In our case, the updates are going to derive from our manipulation of `fraud_accounts`.&#13;
```&#13;
1718981380562	1	7247	7&#13;
1718981380562	1	17519	7&#13;
1718981380562	1	27558	7&#13;
1718981380562	1	20403	7&#13;
1718981380562	1	16584	7&#13;
```&#13;
The data are not really changing much, on account of the winners all having the same counts.&#13;
But, this is actually good for us, because we can see what happens when we force a change.&#13;
&#13;
At this point, let's insert the record `17519` into `fraud_accounts`.&#13;
```&#13;
-- Mark 17519 as fraudulent&#13;
1718981387841	-1	17519	7&#13;
1718981387841	1	32134	7&#13;
```&#13;
We can do the same with `16584`, and then `34985`.&#13;
```&#13;
-- Mark 16584 as fraudulent&#13;
1718981392977	1	34985	7&#13;
1718981392977	-1	16584	7&#13;
-- Mark 34985 as fraudulent&#13;
1718981398158	1	35131	7&#13;
1718981398158	-1	34985	7&#13;
```&#13;
Finally, let's remove all records from `fraud_accounts` and we can see that we return back to the original state.&#13;
```&#13;
-- Remove all fraud indicators.&#13;
1718981403087	-1	35131	7&#13;
1718981403087	1	17519	7&#13;
1718981403087	-1	32134	7&#13;
1718981403087	1	16584	7&#13;
...&#13;
```&#13;
That `34985` record isn't mention here because it only showed up due to our other removals.&#13;
We don't hear about a change because there is no moment when it is in the top five, even transiently.&#13;
That is a great lead-in to Materailize's **consistency** properties!&#13;
&#13;
#### Beat 3: Consistency&#13;
&#13;
All the freshness and responsiveness in the world doesn't mean much if the results are incoherent.&#13;
Materialize only ever presents actual results that actually happened, with no transient errors.&#13;
When you see results, you can confidently act on them knowing that they are real, and don't need further second to bake.&#13;
&#13;
Let's take a look at consistency through the lens of account balances as auctions close and winning buyers must pay sellers.&#13;
```sql&#13;
-- Account ids, with credits and debits from auctions sold and won.&#13;
CREATE VIEW funds_movement AS&#13;
  SELECT id,&#13;
         SUM(credits) AS credits,&#13;
         SUM(debits) AS debits&#13;
  FROM (&#13;
    SELECT seller AS id, amount AS credits, 0 AS debits&#13;
    FROM winning_bids&#13;
    UNION ALL&#13;
    SELECT buyer AS id, 0 AS credits, amount AS debits&#13;
    FROM winning_bids&#13;
  )&#13;
  GROUP BY id;&#13;
```&#13;
&#13;
These balances derive from the same source: `winning_bids`, and although they'll vary from account to account, they should all add up.&#13;
Specifically, if we get the total credits and the total debits, they should 100% of the time be exactly equal.&#13;
```sql&#13;
-- Discrepancy between credits and debits.&#13;
SELECT SUM(credits) - SUM(debits) &#13;
FROM funds_movement;&#13;
```&#13;
This query reports zero, 100% of the time.&#13;
We can `SUBSCRIBE` to the query to be notified of any change.&#13;
```&#13;
materialize=&gt; COPY (SUBSCRIBE (&#13;
    SELECT SUM(credits) - SUM(debits) &#13;
    FROM funds_movement&#13;
)) TO STDOUT;&#13;
&#13;
1716312983129	1	0&#13;
```&#13;
This tells us that starting at time `1716312983129`, there was `1` record, and it was `0`.&#13;
You can sit there a while, and there will be no changes.&#13;
You could also add the `WITH (PROGRESS)` option, and it will provide regular heartbeats confirming that second-by-second it is still zero.&#13;
The credits and debits always add up, and aren't for a moment inconsistent.&#13;
&#13;
We can set up similar views for other assertions.&#13;
For example, every account that has sold or won an auction should have a balance.&#13;
A SQL query can look for violations of this, and we can monitor it to see that it is always empty.&#13;
If it is ever non-empty, perhaps there are bugs in the query logic, its contents are immediately actionable: &#13;
there is a specific time where the inputs evaluated to an invariant-violating output, and if you return to that moment you'll see the inputs that produce the bad output.&#13;
&#13;
The consistency extends across multiple independent sessions.&#13;
The moment you get confirmation that the insert into `fraud_accounts`, you can be certain that no one will see that account in the top five non-fraudulent auction winners.&#13;
This guarantee is called 'strict serializability', that the system behaves as if every event occurred at a specific time between its start and end, and is the strongest guarantee that databases provide.&#13;
&#13;
#### Demo over!&#13;
&#13;
That's it!&#13;
We've completed the introduction to Materialize, and used auction data to show off responsiveness, freshness, and consistency.&#13;
There's a lot more to show off, of course, and if any of this sounded fascinating you should swing by https://materialize.com/register/ to spin up a trial environment.&#13;
&#13;
However, in this post we will continue to unpack how we got all of that `auctions` and `bids` data in the first place!&#13;
&#13;
### Auction Data from Changing Moments&#13;
&#13;
Where do the `auctions` and `bids` data come from?&#13;
You can get them from our load generator, but we're going to try and coax them out of raw SQL.&#13;
We're going to start with something we haven't introduced yet, but it's a view whose content looks like this&#13;
```sql&#13;
-- All seconds within the past 24 hours.&#13;
CREATE VIEW moments AS&#13;
SELECT generate_series(&#13;
    now() - '1 day'::interval + '1 second'::interval,&#13;
    now(),&#13;
    '1 second'&#13;
) moment;&#13;
``` &#13;
&#13;
Unpacking this, `moments` contains rows with a single column containing a timestamp.&#13;
Whenever we look at it, the view contains those timestamps at most one day less than `now()`.&#13;
It should have at any moment exactly 86,400 records present, as many as `auctions` up above.&#13;
&#13;
Importantly, this view definition will not actually work for us.&#13;
You are welcome to try it out, but you'll find out that while it can be *inspected*, it cannot be *maintained*.&#13;
We'll fix that by the end of the post, but it will need to wait until the next section.&#13;
For the moment, let's assume we have this view and the magical ability to keep it up to date.&#13;
&#13;
These 'moments' are not auction data, though.&#13;
How do we get from moments to auctions and bids?&#13;
&#13;
The `auctions` and `bids` collections look roughly like so:&#13;
```&#13;
materialize=&gt; select * from auctions;&#13;
 id | seller |        item        |          end_time          &#13;
----+--------+--------------------+----------------------------&#13;
  2 |   1592 | Custom Art         | 2024-05-20 13:43:16.398+00&#13;
  3 |   1411 | City Bar Crawl     | 2024-05-20 13:43:19.402+00&#13;
  1 |   1824 | Best Pizza in Town | 2024-05-20 13:43:06.387+00&#13;
  4 |   2822 | Best Pizza in Town | 2024-05-20 13:43:24.407+00&#13;
  ...&#13;
(4 rows)&#13;
```&#13;
```&#13;
materialize=&gt; select * from bids;&#13;
 id | buyer | auction_id | amount |          bid_time          &#13;
----+-------+------------+--------+----------------------------&#13;
 31 |    88 |          3 |     67 | 2024-05-20 13:43:10.402+00&#13;
 10 |  3844 |          1 |     59 | 2024-05-20 13:42:56.387+00&#13;
 11 |  1861 |          1 |     40 | 2024-05-20 13:42:57.387+00&#13;
 12 |  3338 |          1 |     97 | 2024-05-20 13:42:58.387+00&#13;
 ...&#13;
```&#13;
&#13;
Auctions have a unique id, a seller id, an item description, and an end time.&#13;
Bids have a unique id (no relation), a buyer id, an auction id, the amount of the bid, and the time of the bid.&#13;
&#13;
The `seller`, `item`, `buyer`, and `amount` fields are all random, within some bounds.&#13;
As a first cut, we'll think about just using random values for each of the columns.&#13;
Where might we get randomness, you ask?&#13;
Well, if *pseudo*-randomness is good enough (it will be), we can use cryptographic hashes of the moments.&#13;
```sql&#13;
-- Extract pseudorandom bytes from each moment.&#13;
CREATE VIEW random AS&#13;
SELECT moment, digest(moment::text, 'md5') as random&#13;
FROM moments;&#13;
```&#13;
Let's start with bytes from `random` to populate columns, and we'd have a first cut at random data.&#13;
Columns like `auctions.item` are populated by joining with a constant collection (part of the generator), but `id` and `seller` could just be random.&#13;
The `end_time` we'll pick to be a random time up to 256 minutes after the auction starts.&#13;
```sql&#13;
-- Totally accurate auction generator.&#13;
CREATE VIEW auctions_core AS&#13;
SELECT &#13;
    moment,&#13;
    random,&#13;
    get_byte(random, 0) + &#13;
    get_byte(random, 1) * 256 + &#13;
    get_byte(random, 2) * 65536 as id,&#13;
    get_byte(random, 3) +&#13;
    get_byte(random, 4) * 256 as seller,&#13;
    get_byte(random, 5) as item,&#13;
    -- Have each auction expire after up to 256 minutes.&#13;
    moment + (get_byte(random, 6)::text || ' minutes')::interval as end_time&#13;
FROM random;&#13;
```&#13;
We've clearly made some calls about how random each of these should be, and those calls influence what we'll see in the data.&#13;
For example, we've established at most 65,536 sellers, which lines up fine with our 86,400 auctions at any moment; some sellers will have multiple auctions and many will not.&#13;
Auctions are open for a few hours on average, close out but linger, and then vanish after 24 hours.&#13;
If we want to change any of these, perhaps to add more distinct items, or keep auctions running longer, or to skew the distribution over sellers, we can!&#13;
&#13;
Similarly, the columns of `bids` are also pretty random, but columns like `auction_id` and `bid_time` do need to have some relationship to `auctions` and the referenced auction.&#13;
We'll build those out in just a moment, but have a bit more tidying to do for `auctions` first.&#13;
&#13;
#### Adding Custom Expiration&#13;
&#13;
Our auctions wind down after some random amount of time, but they are not removed from `auctions` for three hours.&#13;
Thematically we can think of this as auctions whose winners have been locked in, but whose accounts have not yet been settled.&#13;
&#13;
If we want the auction to vanish from `auctions` at this time it closed, we could accomplish this with a temporal filter:&#13;
```sql&#13;
WHERE mz_now() &lt; end_time&#13;
```&#13;
As soon as we reach `end_time` the auction would vanish from `auctions`.&#13;
&#13;
This is a very helpful pattern for load generators that want to control when data arrive and when it departs, in finer detail than 'a twenty four hour window'.&#13;
For example, one could randomly generate `insert_ts` and `delete_ts`, and then use&#13;
```sql&#13;
-- Create an event that is live for the interval `[insert_ts, delete_ts]`.&#13;
WHERE mz_now() BETWEEN insert_ts AND delete_ts&#13;
```&#13;
This pattern allows careful control of when events *appear* to occur, by holding them back until `mz_now()` reaches a value, and then retracting them when it reaches a later value. &#13;
&#13;
#### Making More Realistic Data&#13;
&#13;
Our random numbers for `item` aren't nearly as nice as what the existing load generator produces.&#13;
However, we can get the same results by putting those nice values in a view and using our integer `item` to join against the view.&#13;
```sql&#13;
-- A static view giving names to items.&#13;
CREATE VIEW items (id, item) AS VALUES&#13;
    (0, 'Signed Memorabilia'),&#13;
    (1, 'City Bar Crawl'),&#13;
    (2, 'Best Pizza in Town'),&#13;
    (3, 'Gift Basket'),&#13;
    (4, 'Custom Art');&#13;
```&#13;
&#13;
Now when we want to produce an actual auction record, we can join against items like so&#13;
```sql&#13;
-- View that mirrors the `auctions` table from our load generator.&#13;
CREATE VIEW auctions AS&#13;
SELECT id, seller, items.item, end_time&#13;
FROM auctions_core, items&#13;
WHERE auction.item = items.id;&#13;
```&#13;
&#13;
We've now got a view `auctions` that mirrors what Materialize's load generator produces, at least superficially.&#13;
&#13;
#### Introducing Foreign Key Constraints&#13;
&#13;
Each bid in `bids` references an auction, and we are unlikely to find an extant auction if we just use random numbers for `auction_id`.&#13;
We'd like to base our `bids` on the available auctions, and have them occur at times that make sense for the auction.&#13;
&#13;
We can accomplish this by deriving the bids for an auction from `auctions` itself.&#13;
We will use some available pseudorandomness to propose a number of bids, and then create further pseudorandomness to determine the details of each bid.&#13;
```sql&#13;
CREATE VIEW bids AS&#13;
-- Establish per-bid records and pseudorandomness.&#13;
WITH prework AS (&#13;
    -- Create `get_byte(random, 6)` many bids for each auction, &#13;
    -- each with their own freshly generated pseudorandomness.&#13;
    SELECT &#13;
        id as auction_id,&#13;
        moment as auction_start,&#13;
        end_time as auction_end,&#13;
        digest(random::text || generate_series(1, get_byte(random, 6))::text, 'md5') as random&#13;
    FROM auctions_core&#13;
)&#13;
SELECT&#13;
    get_byte(random, 0) +&#13;
    get_byte(random, 1) * 256 +&#13;
    get_byte(random, 2) * 65536 as id,&#13;
    get_byte(random, 3) AS buyer,&#13;
    auction_id,&#13;
    get_byte(random, 4)::numeric AS amount,&#13;
    auction_start + (get_byte(random, 5)::text || ' seconds')::interval as bid_time&#13;
FROM prework;&#13;
```&#13;
&#13;
We now have a pile of bids for each auction, with the compelling property that when the auction goes away so too do its bids.&#13;
This gives us 'referential integrity', the property of foreign keys (`bids.auction_id`) that their referent (`auction.id`) is always valid.&#13;
&#13;
And with this, we have generated the `auctions` and `bids` data that continually change, but always make sense.&#13;
&#13;
There are several other changes you might want to make!&#13;
For example, random bids means that auctions stop changing as they go on, because new random bids are unlikely to beat all prior bids.&#13;
You could instead have the bids trend up with time, to keep the data interesting.&#13;
But, the changes are pretty easy to roll out, and just amount to editing the SQL that defines them.&#13;
&#13;
Let's pause for now on noodling on ways we could make the data even more realistic.&#13;
Up next we have to unpack how we got that `moments` view in the first place.&#13;
Once we've done that, you are welcome to go back to playing around with load generator novelties and variations!&#13;
&#13;
### Operational Data from Thin Air&#13;
&#13;
Our `auctions` and `bids` data was based on a view `moments` that showed us all timestamps within the past three hours.&#13;
We saw how we could go from that to pretty much anything, through extracted pseudorandomness.&#13;
&#13;
We used a view that seemed maybe too easy, that looked roughly like so:&#13;
```sql&#13;
-- Generate a sliding window over timestamp data.&#13;
-- Arguments: &lt;volume&gt;, &lt;velocity&gt;&#13;
SELECT moment,&#13;
FROM generate_series(&#13;
    '1970-01-01 00:00:00+00', &#13;
    '2099-01-01 00:00:00+00', &#13;
    &lt;velocity&gt;&#13;
) moment&#13;
WHERE now() BETWEEN moment AND moment + &lt;volume&gt;;&#13;
```&#13;
&#13;
This example uses `generate_series` to produce moments at which events will occur.&#13;
The `&lt;velocity&gt;` argument chooses the step size of the `generate_series` call, and locks in the cadence of updates.&#13;
The `&lt;volume&gt;` argument controls for how long each record lingers, and sets the steady state size.&#13;
The result is a sliding window over random data, where you get to control the volume and velocity.&#13;
&#13;
We used `'1 second'` for the velocity and `'1 day'` for the volume.&#13;
&#13;
Now, while you can *type* the above, it won't actually run properly if you press enter.&#13;
The query describes 130 years of data, probably at something like a one second update frequency (because you wanted live data, right?).&#13;
I don't even know how to determine how many records this is accurately based on all the leap-action that occurs.&#13;
Moreover, you won't be able to materialize this view, because `now()` prevents materializations.&#13;
&#13;
To actually get this to work, we'll have to use some clever tricks.&#13;
The coming subsections are a sequence of such tricks, and the punchline will be 'it works!', in case that saves you any time.&#13;
&#13;
#### Clever trick 1: using `mz_now()`&#13;
&#13;
Our first clever trick is to move from `now()` to `mz_now()`.&#13;
These are very similar functions, where the `now()` function gets you the contents of the system clock, and `mz_now()` gets you the transaction time of your command.&#13;
The main difference between the two is that we can materialize some queries containing `mz_now()`, unlike any query containing `now()`.&#13;
&#13;
```sql&#13;
-- Generate a sliding window over timestamp data.&#13;
SELECT moment,&#13;
FROM generate_series(&#13;
    '1970-01-01 00:00:00+00', &#13;
    '2099-01-01 00:00:00+00', &#13;
    '1 second'&#13;
) moment&#13;
--    /------\---- LOOK HERE!&#13;
WHERE mz_now() BETWEEN moment AND moment + '1 day';&#13;
```&#13;
This very simple change means that Materialize now has the ability to keep the query up to date.&#13;
Materialize has a feature called ['temporal filters'](https://materialize.com/docs/transform-data/patterns/temporal-filters/) that allows `mz_now()` in `WHERE` clauses, because we are able to invert the clause and see the moment (Materialize time) at which changes will occur.&#13;
&#13;
Unfortunately, the implementation strategy for keeping this view up to date still involves first producing all the data, and then filtering it (we don't have any magical insight into `generate_series` that allows us to invert its implementation).&#13;
But fortunately, we have other clever tricks available to us.&#13;
&#13;
#### Clever trick 2: Hierachical Generation&#13;
&#13;
The problem above is that we generate all the data at once, and then filter it.&#13;
We could instead generate the years of interest, from them the days of interest, from them the hours of interest, then minutes of interest, then seconds of interest, and finally milliseconds of interest.&#13;
In a sense we are generating *intervals* rather than *moments*, and then producing moments from the intervals.&#13;
&#13;
Let's start by generating all the years we might be interested in.&#13;
We start with all the years we might reasonably need, and a `WHERE` clause that checks for intersection of the interval (`+ '1 year'`) and the extension by volume (`+ '1 day'`).&#13;
```sql&#13;
-- Each year-long interval of interest&#13;
CREATE VIEW years AS&#13;
SELECT * &#13;
FROM generate_series(&#13;
    '1970-01-01 00:00:00+00', &#13;
    '2099-01-01 00:00:00+00', &#13;
    '1 year') year&#13;
WHERE mz_now() BETWEEN year AND year + '1 year' + '1 day';&#13;
```&#13;
This view does not have all that many years in it. &#13;
Roughly 130 of them.&#13;
Few enough that we can filter them down, and get to work on days.&#13;
&#13;
At this point, we'll repeatedly refine the intervals by subdividing into the next granularity.&#13;
We'll do this for years into days, but you'll have to use your imagination for the others.&#13;
We have all the SQL at the end, so don't worry that you'll miss out on that.&#13;
```sql&#13;
-- Each day-long interval of interest&#13;
CREATE VIEW days AS&#13;
SELECT * FROM (&#13;
    SELECT generate_series(&#13;
        year, &#13;
        year + '1 year' - '1 day'::interval, &#13;
        '1 day') as day&#13;
    FROM years&#13;
)&#13;
WHERE mz_now() BETWEEN day AND day + '1 day';&#13;
```&#13;
We'll repeat this on to a view `seconds`, and stop there.&#13;
&#13;
Although we could continue to milliseconds, experience has been that it's hard to demo things changing that quickly through SQL.&#13;
Lines of text flow past like the Matrix, and all you can really see is that there is change, not what the change is.&#13;
&#13;
Unfortunately, there is a final gotcha.&#13;
Materialize is too clever by half, and if you materialize the `seconds` view, it will see that it is able to determine the entire 130 year timeline of the view, history and future, and record it for you.&#13;
At great expense.&#13;
These declarative systems are sometimes just too smart.&#13;
&#13;
#### Clever trick 3: An empty table&#13;
&#13;
We can fix everything by introducing an empty table.&#13;
&#13;
The empty table is only present to ruin Materialize's ability to be certain it already knows the right answer about the future.&#13;
We'll introduce it to each of our views in the same place, and its only function is to menace Materialize with the possibility that it *could* contain data.&#13;
But it won't.&#13;
But we wont tell Materialize that.&#13;
&#13;
```sql&#13;
-- Each day-long interval of interest&#13;
CREATE VIEW days AS&#13;
SELECT * FROM (&#13;
    SELECT generate_series(&#13;
        year, &#13;
        year + '1 year' - '1 day'::interval, &#13;
        '1 day') as day&#13;
    FROM years&#13;
    -- THIS NEXT LINE IS NEW!!&#13;
    UNION ALL SELECT * FROM empty&#13;
)&#13;
WHERE mz_now() BETWEEN day AND day + '1 day';&#13;
```&#13;
&#13;
With these tricks in hand, we now have the ability to spin it up and see what it looks like.&#13;
&#13;
```sql&#13;
CREATE DEFAULT INDEX ON days;&#13;
```&#13;
&#13;
We'll want to create the same default indexes on our other views: `hours`, `minutes`, and `seconds`.&#13;
Importantly, we want to create them in this order, also, to make sure that each relies on the one before it.&#13;
If they did not, we would be back in the world of the previous section, where each would read ahead until the end of time (the year 2099, in this example).&#13;
&#13;
#### Finishing touches&#13;
&#13;
As a final bit of housekeeping, we'll want to go from intervals back to moments, with some additional inequalities.&#13;
```sql&#13;
-- The final view we'll want to use.&#13;
CREATE VIEW moments AS&#13;
SELECT second AS moment FROM seconds&#13;
WHERE mz_now() &gt;= second&#13;
  AND mz_now() &lt; second + '1 day';&#13;
```&#13;
The only change here is the `mz_now()` inequality, which now avoids `BETWEEN` because it has inclusive upper bounds.&#13;
The result is now a view that always has exactly 24 * 60 * 60 = 86400 elements in it.&#13;
We can verify this by subscribing to the changelog of the count query:&#13;
```sql&#13;
-- Determine the count and monitor its changes.&#13;
COPY (&#13;
    SUBSCRIBE (SELECT COUNT(*) FROM moments) &#13;
    WITH (progress = true)&#13;
)&#13;
TO stdout;&#13;
```&#13;
This reports an initial value of 86400, and then repeatedly reports (second by second) that there are no additional changes.&#13;
```&#13;
materialize=&gt; COPY (&#13;
    SUBSCRIBE (SELECT COUNT(*) FROM moments) &#13;
    WITH (progress = true)&#13;
)&#13;
TO stdout;&#13;
1716210913609	t	\N	\N&#13;
1716210913609	f	1	86400&#13;
1716210914250	t	\N	\N&#13;
1716210914264	t	\N	\N&#13;
1716210914685	t	\N	\N&#13;
1716210915000	t	\N	\N&#13;
1716210915684	t	\N	\N&#13;
1716210916000	t	\N	\N&#13;
1716210916248	t	\N	\N&#13;
1716210916288	t	\N	\N&#13;
1716210916330	t	\N	\N&#13;
1716210916683	t	\N	\N&#13;
^CCancel request sent&#13;
ERROR:  canceling statement due to user request&#13;
materialize=&gt; &#13;
```&#13;
All rows with a second column of `t` are 'progress' statements rather than data updates.&#13;
The second row, the only one with a `f`, confirms a single record (`1`) with a value of `86400`.&#13;
&#13;
Yeah, that's it! The only thing left is to read a wall of text containing all the SQL.&#13;
Actually, I recommend bouncing up to the start of the post again, and confirming that the pieces fit together for you.&#13;
It's also a fine time to [try out Materialize](https://materialize.com/register/), the only system that can run all of these views. &#13;
&#13;
### Appendix: All the SQL&#13;
&#13;
```sql&#13;
CREATE TABLE empty (e TIMESTAMP);&#13;
&#13;
-- Supporting view to translate ids into text.&#13;
CREATE VIEW items (id, item) AS VALUES&#13;
    (0, 'Signed Memorabilia'),&#13;
    (1, 'City Bar Crawl'),&#13;
    (2, 'Best Pizza in Town'),&#13;
    (3, 'Gift Basket'),&#13;
    (4, 'Custom Art');&#13;
&#13;
-- Each year-long interval of interest&#13;
CREATE VIEW years AS&#13;
SELECT * &#13;
FROM generate_series(&#13;
    '1970-01-01 00:00:00+00', &#13;
    '2099-01-01 00:00:00+00', &#13;
    '1 year') year&#13;
WHERE mz_now() BETWEEN year AND year + '1 year' + '1 day';&#13;
&#13;
-- Each day-long interval of interest&#13;
CREATE VIEW days AS&#13;
SELECT * FROM (&#13;
    SELECT generate_series(year, year + '1 year' - '1 day'::interval, '1 day') as day&#13;
    FROM years&#13;
    UNION ALL SELECT * FROM empty&#13;
)&#13;
WHERE mz_now() BETWEEN day AND day + '1 day' + '1 day';&#13;
&#13;
-- Each hour-long interval of interest&#13;
CREATE VIEW hours AS&#13;
SELECT * FROM (&#13;
    SELECT generate_series(day, day + '1 day' - '1 hour'::interval, '1 hour') as hour&#13;
    FROM days&#13;
    UNION ALL SELECT * FROM empty&#13;
)&#13;
WHERE mz_now() BETWEEN hour AND hour + '1 hour' + '1 day';&#13;
&#13;
-- Each minute-long interval of interest&#13;
CREATE VIEW minutes AS&#13;
SELECT * FROM (&#13;
    SELECT generate_series(hour, hour + '1 hour' - '1 minute'::interval, '1 minute') AS minute&#13;
    FROM hours&#13;
    UNION ALL SELECT * FROM empty&#13;
)&#13;
WHERE mz_now() BETWEEN minute AND minute + '1 minute' + '1 day';&#13;
&#13;
-- Any second-long interval of interest&#13;
CREATE VIEW seconds AS&#13;
SELECT * FROM (&#13;
    SELECT generate_series(minute, minute + '1 minute' - '1 second'::interval, '1 second') as second&#13;
    FROM minutes&#13;
    UNION ALL SELECT * FROM empty&#13;
)&#13;
WHERE mz_now() BETWEEN second AND second + '1 second' + '1 day';&#13;
&#13;
-- Indexes are important to ensure we expand intervals carefully.&#13;
CREATE DEFAULT INDEX ON years;&#13;
CREATE DEFAULT INDEX ON days;&#13;
CREATE DEFAULT INDEX ON hours;&#13;
CREATE DEFAULT INDEX ON minutes;&#13;
CREATE DEFAULT INDEX ON seconds;&#13;
&#13;
-- The final view we'll want to use .&#13;
CREATE VIEW moments AS&#13;
SELECT second AS moment FROM seconds&#13;
WHERE mz_now() &gt;= second&#13;
  AND mz_now() &lt; second + '1 day';&#13;
&#13;
-- Extract pseudorandom bytes from each moment.&#13;
CREATE VIEW random AS&#13;
SELECT moment, digest(moment::text, 'md5') as random&#13;
FROM moments;&#13;
&#13;
-- Present as auction &#13;
CREATE VIEW auctions_core AS&#13;
SELECT &#13;
    moment,&#13;
    random,&#13;
    get_byte(random, 0) + &#13;
    get_byte(random, 1) * 256 + &#13;
    get_byte(random, 2) * 65536 as id,&#13;
    get_byte(random, 3) +&#13;
    get_byte(random, 4) * 256 as seller,&#13;
    get_byte(random, 5) as item,&#13;
    -- Have each auction expire after up to 256 minutes.&#13;
    moment + (get_byte(random, 6)::text || ' minutes')::interval as end_time&#13;
FROM random;&#13;
&#13;
-- Refine and materialize auction data.&#13;
CREATE MATERIALIZED VIEW auctions AS&#13;
SELECT auctions_core.id, seller, items.item, end_time&#13;
FROM auctions_core, items&#13;
WHERE auctions_core.item % 5 = items.id;&#13;
&#13;
-- Create and materialize bid data.&#13;
CREATE MATERIALIZED VIEW bids AS&#13;
-- Establish per-bid records and randomness.&#13;
WITH prework AS (&#13;
    SELECT &#13;
        id AS auction_id,&#13;
        moment as auction_start,&#13;
        end_time as auction_end,&#13;
        digest(random::text || generate_series(1, get_byte(random, 5))::text, 'md5') as random&#13;
    FROM auctions_core&#13;
)&#13;
SELECT &#13;
    get_byte(random, 0) + &#13;
    get_byte(random, 1) * 256 + &#13;
    get_byte(random, 2) * 65536 as id, &#13;
    get_byte(random, 3) +&#13;
    get_byte(random, 4) * 256 AS buyer,&#13;
    auction_id,&#13;
    get_byte(random, 5)::numeric AS amount,&#13;
    auction_start + (get_byte(random, 6)::text || ' minutes')::interval as bid_time&#13;
FROM prework;&#13;
```&#13;
&lt;!-- ##{'timestamp':1716094800}## --&gt;&#13;
&lt;!-- ##{'script':'&lt;script src='https://udbaa.com/bnr.php?section=GeneralA&amp;pub=847466&amp;format=728x90&amp;ga=g'&gt;&lt;/script&gt;'}## --&gt;&#13;
。</description><guid isPermaLink="true">https://nuowoo.github.io/blog/post/Demonstrating%20Operational%20Data%20with%20SQL.html</guid><pubDate>Thu, 10 Oct 2024 05:19:06 +0000</pubDate></item><item><title>Computing and Maintaining Weird (Outer) Joins</title><link>https://nuowoo.github.io/blog/post/Computing%20and%20Maintaining%20Weird%20%28Outer%29%20Joins.html</link><description>[Differential dataflow](https://github.com/TimelyDataflow/differential-dataflow) has a single join operator: `join`.&#13;
It takes two input collections, and for each `(key, val1)` and `(key, val2)` in the inputs it produces `(key, (val1, val2))` in the output.&#13;
This makes `join` a 'binary equijoin', where it fishes out exactly the exact matches on `key`.&#13;
This restriction is important, and powerful: when either input experiences a change, the `key` of the change is what directs us to the (other) input records that will help us produce the appropriate output change.&#13;
However, there are other 'joins' in the larger relational data world, and we need to support them as well.&#13;
&#13;
In this post we'll build up an implementation of a **multi-way outer equijoin**.&#13;
We'll start small, but arrive at the best way I know how to build these beasts out of existing parts.&#13;
Along the way, we'll &#13;
    get an introduction to how differential dataflow works, &#13;
    develop several ways to use it to implement joins of various stripes, and&#13;
    deploy these techniques together to take on the outer-est of (equi-)joins.&#13;
&#13;
Amazingly, to me at least, we end up needing to understand how to efficiently implement multi-way joins of sums of terms.&#13;
That is, how to efficiently implement&#13;
```&#13;
(A0 + A1 + A2) ⋈ (B0 + B1 + B2) ⋈ (C0 + ...) ⋈ ...&#13;
```&#13;
To be honest, I can't recall this pattern from my database education (such as it was), and I'd love any tips or pointers about where else this shows up.&#13;
If you get to the end and it all checks out as old-hat for you, I'd love to know about it!&#13;
&#13;
### Differential Dataflow and the Binary Equijoin `join`&#13;
&#13;
Differential dataflow is a framework for computing and then maintaining functions over continually changing volumes of data.&#13;
It manipulates *updates* to data, written as triples `(data, time, diff)` and indicating that at `time` the number of occurrences of `data` changes by `diff`.&#13;
Differential dataflow provides primitive operators like `map`, `filter`, `join`, `reduce`, and `iterate`, which users compose to build more complex functions.&#13;
Each operator translates input updates into the output updates that would result from continually re-evaluating the operator at every time. &#13;
Similarly, the composed dataflow of operators similarly produces output updates that correspond exactly to continual reevaluation on the changing inputs.&#13;
&#13;
The `join` operator applies to two input collections, for which their `data` have the shape `(key, _)`: pairs of some common 'key' type and potentially unrelated 'value' types.&#13;
The intended output is a tuple `(key, (val1, val2))` for each pair of inputs that have a matching `key`.&#13;
The output updates can be derived from first principles, but with enough head-scratching one can conclude that each pair of updates with matching key produces one output update:&#13;
&#13;
```   &#13;
    update1: ((key, val1), time1, diff1)     -- First input&#13;
    update2: ((key, val2), time2, diff2)     -- Second input&#13;
-&gt; &#13;
    ((key, (val1, val2)),  max(time1, time2),  diff1 * diff2)&#13;
     \-- output data --/   \----  time ----/   \--  diff --/&#13;
```&#13;
&#13;
We can respond to each input update by iterating over the updates in the *other* input with the same key, and use the rule above.&#13;
There are smarter ways to do this, consider for example the second update introducing and retracting a record before `time1`: we would produce two outputs that exactly cancel.&#13;
In any case, we'll need to retain *some* information about each input, ideally arranged by `key` so that these updates can be efficiently retrieved.&#13;
&#13;
Differential dataflow has a primitive called an 'arrangement', which is both a stream of updates and a maintained indexed form of their accumulation.&#13;
An arrangement translates a stream of updates into a sequence of indexed 'batches' of updates, each of which are indexed by `key`.&#13;
It also maintains a collection of these batches that serve as an indexed roll-up of the accumulated updates, using a structure analogous to a [log-structured merge-tree](https://en.wikipedia.org/wiki/Log-structured_merge-tree).&#13;
Arrangements are the primary mechanism to maintain 'state' as a dataflow runs, and specifically are what `join` uses: each input to `join` must be an arrangement, and if they are not then they will be arranged for you.&#13;
&#13;
### Technique 1: Shared Arrangements&#13;
&#13;
A key advantage to using arrangements is that they can be [*shared*](http://www.vldb.org/pvldb/vol13/p1793-mcsherry.pdf).&#13;
Arranged data can be used by any number of dataflows, avoiding the cost of an additional redundant arrangement.&#13;
As an example, imagine we have a collection of link data `(source, target)`, and we would like to compute and maintain those identifiers within three steps of some query set `query`.&#13;
If the data are arranged, say in an arrangement named `links`, we could write&#13;
```rust&#13;
// Join `query` against `links` three times, giving&#13;
// the identifiers three steps away from each query.&#13;
query.map(|query| (query, query))&#13;
     .join(links).map(|(step0, (query, step1))| (step1, query))&#13;
     .join(links).map(|(step1, (query, step2))| (step2, query))&#13;
     .join(links).map(|(step2, (query, step3))| (step3, query))&#13;
```&#13;
This fragment would naively require six arrangements, two for each `join` invocation.&#13;
However, we are able to re-use the `links` arrangement at no cost, and instead only introduce three arrangements, corresponding to the number of steps (0, 1, and 2) out from `query`.&#13;
These new arrangements can be substantially smaller than `links`, and the amount of work required to compute and maintain the results can be trivial even when `links` is enormous.&#13;
&#13;
### Technique 2: Functional Joins&#13;
&#13;
This one is a bit of cheat, in that by the end of it you may not be sure it is even a join.&#13;
&#13;
There are times, and we will see them coming up, where we want to join not against *data* but against a *function*.&#13;
For example, perhaps we have a collection of `(line, text)` of pairs of integers and strings, and we would like to split each `text` into the words it contains.&#13;
One way to do this is with `join`: the first input is our lines of text, and the second input is the quite large collection of pairs `(text, (pos, word))` each indicating a word that can be found in `text`.&#13;
&#13;
Rather than hope to implement this with `join`, because we couldn't hope to maintain the second collection, we could implement this with the `flat_map` operator instead.&#13;
```rust&#13;
// Convert each `text` into the words it contains.&#13;
lines.flat_map(|(line, text)| &#13;
    text.split_whitespace()&#13;
        .enumerate()&#13;
        .map(|(pos, word)| (line, text.clone(), (pos, word.to_owned())))&#13;
)&#13;
```&#13;
&#13;
At this point you may be wondering why we have called this a 'functional join' rather than a 'flat map'.&#13;
You are not wrong that `flat_map` is the best way to implement this.&#13;
However, we will need to prepare ourselves to see this pattern in joins, and understand that it is one way to implement something that may present as a `join`.&#13;
Each input record results in zero or many output records, determined by some key fields in the record.&#13;
&#13;
### Technique 3: Multi-way Joins&#13;
&#13;
Even managing a single join can be challenging, but invariably folks actually want to perform multiple joins at once.&#13;
Recall our `query` and `links` example, from just up above&#13;
```rust&#13;
// Join `query` against `links` three times, giving&#13;
// the identifiers three steps away from each query.&#13;
query.map(|query| (query, query))&#13;
     .join(links).map(|(step0, (query, step1))| (step1, query))&#13;
     .join(links).map(|(step1, (query, step2))| (step2, query))&#13;
     .join(links).map(|(step2, (query, step3))| (step3, query))&#13;
```&#13;
This performs three joins, and introduces new arrangements for the left inputs of each of the three `join` calls.&#13;
We argued that this could be small if `query` is small, and also if each of the intermediate results are small.&#13;
But if this isn't the case, then they might be large, and we might end up maintaining quite a lot of information.&#13;
&#13;
Let's take a different example that might not be so easy.&#13;
Imagine you start with a collection `facts` of raw data, and you want to enrich it using dimesion tables that translate foreign keys like 'user id' into further detail.&#13;
The additional detail may result in further keys you want to unpack, like addresses, zipcodes, and the sales agents they map to.&#13;
```rust&#13;
// Enrich facts with user, address, and sales agent information.&#13;
facts.map(|fact| (fact.user_id, fact)).join(users).map( .. )&#13;
     .map(|fact| (fact.addr_id, fact)).join(addrs).map( .. )&#13;
     .map(|fact| (fact.zipcode, fact)).join(agent).map( .. )&#13;
```&#13;
Lots and lots of data pipelines have this sort of enrichment in them, in part because 'normalized' database best practices are to factor apart this information.&#13;
Unfortunately, stitching it back together efficiently is an important part of these best practices.&#13;
&#13;
For this query, we may have arrangements of `users`, `addrs`, `agent`.&#13;
However, we are unlikely to have arrangements of the left inputs to each of the `join`s.&#13;
The very first left input, `facts` keyed by `user_id`, is plausibly something we might have pre-arranged, but the other two result from the query itself.&#13;
Naively implemented, we'll create second and third arrangements of enriched `fact` data, which can be really quite large.&#13;
&#13;
Fortunately, there is a trick for multiway joins that I have no better name for than ['delta joins'](https://github.com/TimelyDataflow/differential-dataflow/tree/master/dogsdogsdogs).&#13;
The gist is that rather than plan a multiway join as a sequence (or tree) of binary joins, as done in System R, you describe how the whole join will vary as a function of each input.&#13;
You can get this derivation by expanding out our derivation for binary joins, in terms of input updates, to multiple inputs.&#13;
You then independently implement each of these response functions for each input as best as you can and then compose their results.&#13;
&#13;
For example, our query above joins four relations: `facts`, `users`, `addrs`, and `agent`, subject to some equality constraints.&#13;
When `facts` changes, we need to look up enrichments in `users`, then `addrs`, then `agent` to find the change to enriched facts.&#13;
When `agent` changes, we need to find the affected `addrs`, then `users`, then `facts`, in order to update the enrichment of existing facts.&#13;
&#13;
```&#13;
-- rules for how to react to an update to each input.&#13;
-- elided: equality constraints for each join (⋈).&#13;
d_query/d_facts = d_facts ⋈ users ⋈ addrs ⋈ agent&#13;
d_query/d_users = d_users ⋈ addrs ⋈ agent ⋈ facts&#13;
d_query/d_addrs = d_addrs ⋈ agent ⋈ users ⋈ facts&#13;
d_query/d_agent = d_agent ⋈ addrs ⋈ users ⋈ facts&#13;
```&#13;
The overall changes to `query` result from adding together these update rules.&#13;
&#13;
What's different above is that each of the `d_term ⋈` joins are *ephemeral*: no one needs to remember the `d_` part of the input.&#13;
Each of these rules are implementable with what differential dataflow calls a `half_join`: an operator that responds to records in one input by look-ups into a second, and which does not respond to changes to the second input.&#13;
The `half_join` operator needs an arrangement of its second input, but not of its first input.&#13;
&#13;
This pattern has different arrangement requirements than the sequence of binary `join` operators.&#13;
Each collection needs an arrangement by those attributes by which it may be interrogated.&#13;
In the example above, the required arrangements end up being:&#13;
&#13;
1. input `facts` arranged by `user_id`,&#13;
2. input `users` arranged by `user_id` and also by `addr_id`,&#13;
3. input `addrs` arranged by `addr_id` and also by `zipcode`,&#13;
4. input `agent` arranged by `zipcode`.&#13;
&#13;
This ends up being six arrangements, just like before, but they are all arrangements we might reasonably have ahead of time.&#13;
The *incremental* arrangement cost of the query can be zero, if these arrangement are all pre-built.&#13;
&#13;
### Boss Battle: Left Outer Joins&#13;
&#13;
An 'outer' join is a SQL construct that is much like an standard ('inner') join except that any records that 'miss', i.e. do not match any other records, are still produced as output but with `NULL` values in columns we hoped to populate.&#13;
Outer joins are helpful in best-effort joins, where you hope to enrich some data, but can't be certain you'll find the enrichment and don't want to lose the input data if you cannot.&#13;
&#13;
For example, consider our `facts`, `users`, `addrs`, and `agent` scenario just above.&#13;
What would happen if there is a `user_id` that does not exist in `users`, or a `addr_id` that does not exist in `addrs`, or a `zipcode` that does not exist in `agent`?&#13;
Written as a conventional join, we would simply drop such records on the floor and never speak of them.&#13;
Sometimes that is the right thing to do, but often you want to see the data along with any *failures* to find the enrichments.&#13;
&#13;
If we take our example from above but use `LEFT JOIN` instead of `join`, we will keep even facts that do not match `users`, `addrs`, or `agent`.&#13;
```sql&#13;
-- Enrich facts with more data, but don't lose any.&#13;
facts LEFT JOIN users ON (facts.user_id = users.id)&#13;
      LEFT JOIN addrs ON (users.addr_id = addrs.id)&#13;
      LEFT JOIN agent ON (addrs.zipcode = agent.zc)&#13;
```&#13;
&#13;
There are also `RIGHT` and `FULL` joins, which respectively go in the other direction (e.g. output users that match no facts, with null fact columns) and in both directions (all bonus records that would be added to a `LEFT` or `RIGHT` join).&#13;
We are only going to noodle on `LEFT` joins, though the noodling should generalize just fine.&#13;
&#13;
To implement left joins, we'll need to find a way to express them in terms of the tools we have.&#13;
Those tools are .. the operators differential dataflow provides; things like `map`, `filter`, `join`, and `reduce` (no `iterate`. NO!).&#13;
&#13;
### Step one: turn LEFT JOINs into JOINs&#13;
&#13;
When we left join two collections, some records match perfectly as in an inner join, and some do not.&#13;
What do we have to add to the results of the inner join to get the correct answer?&#13;
Specifically, any keys that might be present in the first input, but are not present in the second input, could just be added to the second input with `NULL` values.&#13;
&#13;
```sql&#13;
-- Some facts exactly match some entry in users.&#13;
SELECT * FROM facts INNER JOIN users ON (facts.user_id = users.id)&#13;
-- Some facts totally miss, but need to match something.&#13;
UNION ALL&#13;
SELECT facts.*, NULL FROM facts&#13;
WHERE facts.user_id NOT IN (SELECT id FROM users)&#13;
```&#13;
This construction keeps the `INNER JOIN` pristine, but adds in `facts` extended by `NULL`s for any fact whose `user_id` is not found in `users`.&#13;
Although not totally clear, `NOT IN` results in a join between `facts` and distinct `users.id`.&#13;
This approach feels good, re-uses arrangements on `facts` and `users`, and is pretty close to what Materialize does for you at the moment.&#13;
&#13;
However, this technique is not great for multiway outer joins.&#13;
We need access to the left input (here: `facts`) to complete the outer join, and generally that input is the result of the outer join just before this one.&#13;
If we need to have that answer to form this query fragment, we don't have a story for how they all become one multiway inner join.&#13;
Likewise, Materialize currently plans a multiway outer join as a *sequence* of fragments like above that *involve* inner joins, but are not *an* inner join.&#13;
&#13;
### Step two: Multiway LEFT JOINS into Multiway JOINs&#13;
&#13;
Let's take the intuition above and see if we can preserve the join structure.&#13;
We want to produce a SQL fragment that is at its root just an inner join.&#13;
We will need to be careful that it should rely on base tables, not its direct inputs (what?).&#13;
&#13;
Let's start and we'll see where we get.&#13;
&#13;
First, let's rewrite the above fragment in a way that looks more like *one* inner join.&#13;
One one side we have `facts`, and on the other side .. at least `users` but also some other stuff?&#13;
For a first cut, that 'other stuff' is .. the `user_id`s in `facts` but not in `users`?&#13;
We could add those rows to `users`, with `NULL` values in missing columns, and see what we get!&#13;
&#13;
As it turns out we get totally the wrong answer. &#13;
Best intentions, of course, but the wrong answer.&#13;
I believe the right answer is expressed roughly this way, in SQL:&#13;
&#13;
```sql&#13;
-- Some facts exactly match some entry in users.&#13;
SELECT facts.*, users.* &#13;
FROM facts INNER JOIN users ON (facts.user_id = users.id)&#13;
-- Some facts totally miss, but could match something.&#13;
UNION ALL&#13;
WITH absent(id) AS (&#13;
    SELECT user_id FROM facts &#13;
    EXCEPT &#13;
    SELECT id FROM users&#13;
)&#13;
SELECT facts.*, NULL &#13;
FROM facts INNER JOIN absent ON (facts.user_id = absent.id)&#13;
-- Some facts have NULL `user_id` and refuse to be joined.&#13;
UNION ALL&#13;
SELECT facts.*, NULL&#13;
FROM facts WHERE facts.user_id IS NULL&#13;
```&#13;
&#13;
We do grab the `absent` keys, but importantly we produce `NULL` in their key columns.&#13;
We also need to deal with potentially null `user_id` values, which we do in the third clause, because SQL's `NULL` values do not equal themselves.&#13;
Again, best intentions, I'm sure.&#13;
&#13;
The good news is that we have framed the SQL in a way that looks like (taking some notational liberties):&#13;
```&#13;
  facts ⋈ users&#13;
+ facts ⋈ absent    -- with null outputs&#13;
+ facts ⋈ NULLs     -- only for null user_id&#13;
```&#13;
Each of the three joins are slightly different, but they all have the property that `facts` arranged by `user_id` is enough for them.&#13;
We can and will now factor out `facts` from these three terms, which puts us in a position to write our multiway left join as:&#13;
&#13;
```&#13;
-- Left join of facts, users, addrs, and agent.&#13;
facts ⋈ (users + absent(users) + NULL)&#13;
      ⋈ (addrs + absent(addrs) + NULL)&#13;
      ⋈ (agent + absent(agent) + NULL)&#13;
```&#13;
This is starting to look a bit more like the joins over sums of terms advertised in the beginning of the post.&#13;
For the moment, we are just going to add together the terms, though.&#13;
&#13;
There is quite a lot unsaid here, and the nature of the ⋈ varies a bit for each of the terms in parentheses.&#13;
You do have to populate the `absent(foo)` collections with values from base relations, rather than their immediate inputs.&#13;
And fortunately, SQL notwithstanding, differential dataflow *does* equate NULL with itself, and everything works out just fine.&#13;
Materialize [recently merged](https://github.com/MaterializeInc/materialize/pull/24345) an approach that looks like this for multiway outer joins.&#13;
It's early days, but we'll soon start exploring how this work for folks with stacks of left joins.&#13;
&#13;
But the story doesn't end here. &#13;
Somewhat stressfully, this approach takes existing inputs `facts`, `users`, `addrs`, and `agent` and .. fails to use any of their pre-existing arrangements.&#13;
It has some other performance issues as well.&#13;
&#13;
### Step three: Rendering JOINs of UNIONs&#13;
&#13;
The last step, or next step at least .. perhaps not the last, is to render these query plans efficiently.&#13;
At the moment we have no better plan than to treat the augmented collections as new collections, arrange them, and join them.&#13;
Roughly like so:&#13;
```&#13;
-- Left join of facts, users, addrs, and agent.&#13;
with users_aug as (users + absent(users) + NULL)&#13;
with addrs_aug as (addrs + absent(users) + NULL)&#13;
with agent_aug as (agent + absent(agent) + NULL)&#13;
facts ⋈ users_aug ⋈ addrs_aug ⋈ agent_aug&#13;
```&#13;
&#13;
These `_aug` collections are as big (somewhat bigger) than their unaugmented counterparts, and it feels somewhat bad to re-arrange them.&#13;
It feels bad that despite pre-arranging `users`, `addrs`, and `agent` we can re-use none of them.&#13;
It feels bad that all `NULL` values will be routed to a single worker just to find out that they map to `NULL`; lots of work for no surprise.&#13;
&#13;
However, we can get around all of these bad feels with some dataflow shenanigans.&#13;
Unfortunately, they are shenanigans that as far as I can tell neither Materialize nor SQL can describe.&#13;
&#13;
We have two strategies for evaluating multiway joins: as a sequence of binary joins, and using delta join rules.&#13;
The shenanigans are easier with the sequence of binary joins, so let's start there.&#13;
We are going to do something as simple as re-distributing over the `⋈` operator, performing each join the way we want.&#13;
We then add up the results of each step of the join rather than adding up the inputs to each step of the join.&#13;
&#13;
```&#13;
-- Left join of facts, users, addrs, and agent.&#13;
step0 = facts;&#13;
step1 = step0 ⋈ users + step0 ⋈ absent(users) + step0 ⋈ NULL;&#13;
step2 = step1 ⋈ addrs + step1 ⋈ absent(addrs) + step1 ⋈ NULL;&#13;
step3 = step2 ⋈ agent + step2 ⋈ absent(agent) + step2 ⋈ NULL;&#13;
step3&#13;
```&#13;
Each of these ⋈ operators are slightly different. &#13;
The first ⋈ in each row is the traditional equijoin.&#13;
The second ⋈ in each row is an equijoin that projects away matched keys and puts `NULL` in their place.&#13;
The third ⋈ in each row only matches nulls.&#13;
&#13;
However, in each line we only have to arrange non-null `stepx` and determine and arrange `absent(foo)`. &#13;
We can re-use existing arrangements of `users`, `addrs`, and `agent`.&#13;
The join with `NULL` can be implemented as a `flat_map` rather than by co-locating all null records for a `join` (omg finally explained).&#13;
&#13;
In actual fact, we can implement this in both SQL and Materialize, but in doing so we'll lose the multiway join planning benefit of avoiding intermediate arrangements.&#13;
We will need to arrange `stepx` for each `x`, and the nice folks with stack of left joins 30+ deep (yes, seriously) will be sitting on 30x as much data as they feel they should.&#13;
&#13;
To recover the benefits, let's grab the delta join construction from way up above. &#13;
I'll use `_aug` suffixes to remind us that it isn't going to be as easy as joining against the pre-arranged collections.&#13;
```&#13;
-- rules for how to react to an update to each input.&#13;
-- elided: equality constraints for each join (⋈).&#13;
d_query/d_facts     = d_facts     ⋈ users_aug ⋈ addrs_aug ⋈ agent_aug&#13;
d_query/d_users_aug = d_users_aug ⋈ addrs_aug ⋈ agent_aug ⋈ facts&#13;
d_query/d_addrs_aug = d_addrs_aug ⋈ agent_aug ⋈ users_aug ⋈ facts&#13;
d_query/d_agent_aug = d_agent_aug ⋈ addrs_aug ⋈ users_aug ⋈ facts&#13;
```&#13;
Ignore for the moment the fact that `d_users_aug` is complicated (an update to `users` may induce the opposite update to `absent(users)`).&#13;
Each line up above describes a sequence of `half_join` applications, which like `join` also distributes over `+`.&#13;
&#13;
```&#13;
  d_query/d_facts    &#13;
= d_facts ⋈ users_aug ⋈ addrs_aug ⋈ agent_aug&#13;
= ( &#13;
    d_step0 = d_facts;&#13;
    d_step1 = d_step0 ⋈ users + d_step0 ⋈ absent(users) + d_step0 ⋈ NULL;&#13;
    d_step2 = d_step1 ⋈ addrs + d_step1 ⋈ absent(addrs) + d_step1 ⋈ NULL;&#13;
    d_step3 = d_step2 ⋈ agent + d_step2 ⋈ absent(agent) + d_step2 ⋈ NULL;&#13;
    d_step3&#13;
)&#13;
```&#13;
Each time we need to do a `half_join`, we can unpack the right argument to it and conduct the half join as we see fit.&#13;
We can either `half_join` with a pre-existing arrangement, `half_join` with a new arrangement of absent values, or `flat_map` some `NULL` values into place.&#13;
&#13;
Writing the whole thing out is exhausting, especially for 30-deep stacks of left joins.&#13;
Fortunately this is something computers are good at.&#13;
Much like it now seems that they may be good at computing and maintaining deep stacks of left equijoins.&#13;
&#13;
### What's next?&#13;
&#13;
There is an expressivity gap to close between SQL/Materialize and differential dataflow.&#13;
I'm not aware of a SQL-to-SQL rewrite that gets us the desired implementation, because we cannot afford to distribute the joins out across the unions, and SQL does not have a `half_join` operator.&#13;
We're pondering options now, including expanding our lowest level IR to reflect e.g. half joins, and tweaking the renderer to recognize the idiom of joins between sums of terms.&#13;
There will certainly be some amount of measurement as we try and assess the remaining gap, and draw down the amount of time and resources spent on outer joins.&#13;
&#13;
I have a concurrent effort to spread the gospel of [referential integrity](https://en.wikipedia.org/wiki/Referential_integrity) so that we can turn those outer joins to inner joins.&#13;
You can understand how in weakly consistent systems you'd need the outer joins to cover for inconsistencies, but do you need it in a strongly consistent system like Materialize?&#13;
&#13;
Of course, if you've read this far you have an obligation to fill me in on what I've missed about all of this.&#13;
Is there an easier transform, one that doesn't end up joining terms that are themselves sums of useful constituents?&#13;
Do you have an exciting use case for maintaining stacks of outer joins, and you've been burned before?&#13;
Do reach out in these cases, and [take Materialize for a spin](https://materialize.com/register/) (though, if you have stacks of 30+ left joins, please reach out for some personal attention).&#13;
&#13;
&lt;!-- ##{'timestamp':1710738000}## --&gt;。</description><guid isPermaLink="true">https://nuowoo.github.io/blog/post/Computing%20and%20Maintaining%20Weird%20%28Outer%29%20Joins.html</guid><pubDate>Mon, 18 Mar 2024 05:00:00 +0000</pubDate></item><item><title>Materialize and Advent of Code</title><link>https://nuowoo.github.io/blog/post/Materialize%20and%20Advent%20of%20Code.html</link><description>&#13;
&#13;
This past year Team Materialize struck out to do each day of 2023's [Advent of Code](https://adventofcode.com/2023), an annual programming event with thought-provoking problems that you are encouraged to approach from non-standard directions.&#13;
We figured we'd try and use SQL for the whole thing.&#13;
&#13;
SQL is a bold choice because it is meant for querying data, and not as much for general computation.&#13;
Several of the problems call for interesting algorithms, specific data structures, and some flexibility.&#13;
However, Materialize's core thesis is that you can do so much more with SQL that just query your data.&#13;
If you want to move operational logic from bespoke code into SQL, you'll need to be able to express that logic.&#13;
And so, Advent of Code was a great opportunity to stretch our legs, and fingers, and see just how much logic fits into SQL.&#13;
&#13;
### Preliminaries&#13;
&#13;
There's a lot of content in the month's problems.&#13;
There are 49 problems, and although there is some overlap really there is too much to say about all of them.&#13;
We aren't going to recount each of the problems, the whimsical backstories, and the shape of the problem inputs.&#13;
We'll try and flag some surprising moments, though, and you should dive into those problems if you are keen (they can each be done on their own).&#13;
&#13;
I (Frank) wrote all of my solutions using Materialize's `WITH MUTUALLY RECURSIVE` even when recursion was not required.&#13;
This just helped me start writing, as the blocks allow you to just start naming subqueries and writing SQL.&#13;
&#13;
My solutions all had the same skeletal structure:&#13;
```sql&#13;
WITH MUTUALLY RECURSIVE&#13;
&#13;
    -- Parse the problem input into tabular form.&#13;
    lines(line TEXT) AS ( .. ),&#13;
&#13;
    -- SQL leading up to part 1.&#13;
    part1(part1 BIGINT) AS ( .. ),&#13;
&#13;
    -- SQL leading up to part 2.&#13;
    part2(part2 BIGINT) AS ( .. ) &#13;
&#13;
SELECT * FROM part1, part2;&#13;
```&#13;
&#13;
As mentioned, we won't always need recursion.&#13;
However, we often do use recursion, and may even need it.&#13;
We'll call this out, as the use (and ease) of recursion in SQL was one of the main unlocks.&#13;
&#13;
### Week one&#13;
&#13;
[Day one](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1201.md) was largely about text manipulation, specifically extracting numbers from text, and was well-addressed by using regular expressions to manipulate and search the text. &#13;
&#13;
[Day two](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1202.md) was largely about aggregation: rolling up counts and maxima for games involving numbers of colored cubes; SQL did great here.&#13;
&#13;
[Day three](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1203.md) has inputs in grid form, where there can be interaction between multiple lines (with symbols above or below others). &#13;
You are looking for runs of numerals, and I used `WMR` to track these down; reportedly you can also use regular expressions, but I was not clever enough for that!&#13;
&#13;
[Day four](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week4/aoc_1225.md) introduced scratch cards where each line of input has some winners and losers. &#13;
This was easy SQL until part two, in which winners give you other scratch cards, which have winners that give you other scratch cards, which .. you can see the recursion. &#13;
Despite being wordy and complicated, the SQL isn't so bad:&#13;
```sql&#13;
    -- PART 2&#13;
    -- Each card provides a copy of the next `score` cards.&#13;
    expanded(card INT, score BIGINT) AS (&#13;
        SELECT * FROM matches&#13;
        UNION ALL&#13;
        SELECT&#13;
            matches.card,&#13;
            matches.score&#13;
        FROM&#13;
            expanded,&#13;
            matches,&#13;
            generate_series(1, expanded.score) as step&#13;
        WHERE&#13;
            expanded.card + step = matches.card&#13;
    ),&#13;
    part2(part2 BIGINT) AS ( SELECT COUNT(*) FROM expanded)&#13;
```&#13;
This would be tricky to do with non-recursive SQL, as the data itself tells us how to unfold the results.&#13;
Hooray for recursion!&#13;
&#13;
[Day five](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1205.md) was a bit of a bear.&#13;
It was the same day we were doing a Materialize on-site and we were all a bit distracted, but also it was pretty beefy. &#13;
You first have to 'route' various elements through a sequence of remappings, whose length is defined in the data.&#13;
You then have to expand that out to routing whole intervals (rather than elements), and .. there is just lots of potential for error.&#13;
I used recursive SQL to handle all the remapping, but other folks just expanded out their SQL for each of the (ten-ish) remappings.&#13;
&#13;
[Day six](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1206.md) was about whether you knew (or were willing to learn about) the [quadratic formula](https://en.wikipedia.org/wiki/Quadratic_formula).&#13;
&#13;
[Day seven](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1207.md) is about scoring poker hands, using some new rules for tie breaking. &#13;
This was mostly SQL aggregation, as the numbers of each card in each hand largely determine the outcome, other than tie-breaking where I learned about the [`translate`](https://materialize.com/docs/sql/functions/#translate) function.&#13;
&#13;
### Week two&#13;
&#13;
[Day eight](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1208.md) involved some graph navigation (recursion), and some mathematics.&#13;
The mathematics were of the form 'notice that various things are relatively prime', and it was important to rely on SQL as a tool to support reasoning, as opposed to directly attacking the specified computation.&#13;
In this case, my problem called for 14,935,034,899,483 steps, and no tool is going to make direct simulation be the right answer.&#13;
&#13;
[Day nine](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1209.md) was a refreshing introduction to polynomials, and how if you take enough derivatives of them they end up at zero.&#13;
The task was to do this, repeatedly difference adjacent measurements, or adjacent differences, etc., until you get all zeros.&#13;
Then, integrate back up to get projections in the forward and reverse direction.&#13;
I used recursion here to accommodate the unknown degree of the polynomial (somewhere in the twenties).&#13;
&#13;
[Day ten](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1210.md) presents you with a grid of pipe (symbols `|`, `-`, `J`, `7`, `F`, and `L`), and questions about how long a loop of pipe is, and then how many cells are contained within it. The first part involved recursion, and I used it again for a dynamic programming solution to the second part.&#13;
&#13;
[Day eleven](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1211.md) presents a grid of 'galaxies' and has you calculate the distance between pairs (the L1 or 'Manhattan' distance, always the sum of absolute values of coordinate differences). &#13;
Parts one and two were the same, but with different magnitudes of numbers.&#13;
No recursion here!&#13;
&#13;
[Day twelve](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1211.md) was about sequence alignment, matching partial observations with hard constraints.&#13;
Dynamic programming was a great solution here, using recursion.&#13;
&#13;
[Day thirteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1213.md) had grids of observations with the hypothesis that each is mirrored, horizontally or vertically, at some point that you need to find.&#13;
SQL and subqueries were a great way to validate hypothetical mirroring axes.&#13;
&#13;
[Day fourteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1214.md) was a treat, in that it used *nested* recursion: a `WMR` block within a `WMR` block.&#13;
The problem was simulation of rocks that roll in cardinal directions, changing the direction ninety degrees, and repeating.&#13;
Each simulation was recursive (rocks roll until they stop), and we were meant to repeat the larger progress a great many times (1,000,000,000 cycles).&#13;
The only bummer here was the amount of copy/paste re-use, as each of the four cardinal directions had different subqueries.&#13;
&#13;
### Week three&#13;
&#13;
[Day fifteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1215.md) has you implement a hash function, and then a hash map.&#13;
Recursion was a handy way to walk through the input to be hashed, though the hash function was simple enough that you could have used math directly instead. &#13;
The second part (the hash map) did not require recursion, as rather than simulate the operations you could leap to the final state you were looking for.&#13;
&#13;
[Day sixteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1216.md) was about bouncing light around in a grid, and seeing how many grid cells are illuminated.&#13;
The illumination process was classic recursive SQL, where you keep expanding `(row, col, dir)` triples until the set reaches a fixed point.&#13;
In the second part the light sources had an origin, which is just a fourth column to add, tracking the source of each ray of light.&#13;
&#13;
[Day seventeen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1217.md) is a pathfinding problem, with constraints on how you move around the path (not too short or too long in any direction at once).&#13;
Classic recursive SQL to implement [Bellman-Ford](https://en.wikipedia.org/wiki/Bellman–Ford_algorithm).&#13;
&#13;
[Day eighteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1218.md) provides instructions of how a digger will move around, excavating earth, and asks you to calculate the area.&#13;
This is an opportunity to learn about the [Trapezoid formula](https://en.wikipedia.org/wiki/Shoelace_formula#Trapezoid_formula) for computing the area as the addition and subtraction of trapezoid areas.&#13;
&#13;
[Day nineteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1219.md) sneakily introduces you to [binary space partitioning](https://en.wikipedia.org/wiki/Binary_space_partitioning), where rules based on inequality tests route you to new rules, until eventually you reach some rule that says 'accept' or 'reject'.&#13;
This was all pretty easy, except for a substantial amount of SQL overhead related to the various symbols and characters and coordinates all of which required their own columns.&#13;
&#13;
[Day twenty](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1220.md) presents you with the simulation of an asynchronous circuit, and this is the day that almost broke me.&#13;
Mechanically the SQL isn't that complicated, but *debugging* the SQL was a real challenge.&#13;
It got done over the course of a quite long train ride into the evening.&#13;
&#13;
[Day twenty-one](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1221.md) was another example of some (recursive) SQL for grid exploration, followed by some mathematics.&#13;
In this case the grid exploration was standard, determining reachable locations on the grid, and then the math was quadratic extrapolation from a sequence of measurements (to something too large to actually evaluate, an answer of 621,289,922,886,149 reachable states).&#13;
&#13;
### Week four&#13;
&#13;
The last week was shorter, but also culminated in some pretty exciting problems and techniques.&#13;
&#13;
[Day twenty-two](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week4/aoc_1222.md) had shapes made of cubes falling into a well, and coming to rest on others (or the ground).&#13;
There were then questions about how many pieces are load bearing, and also for each load bearing piece how many others would fall if they were removed.&#13;
Dropping the pieces used recursive SQL, determining the load bearing pieces did not, but then scoring the load bearing pieces again required recursion.&#13;
&#13;
[Day twenty-three](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week4/aoc_1223.md) is a classic example of finding the 'longest path' in a directed graph.&#13;
This is a relatively easy problem when the input is acyclic (part one), and it is NP-hard when the input may have cycles (part two).&#13;
Part one was a mostly vanilla recursive SQL query, and part two encoded the 32 prior state options in a large integer and just did a lot of work.&#13;
&#13;
[Day twenty-four](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week4/aoc_1224.md) had most folks reach for a numerical solver, something like Mathematica or z3.&#13;
That is less easy in SQL, and I needed to learn some math instead (specifically how to find the intersection of two line segments).&#13;
Although part two seemed quite complex, it ended up being relatively easy when you realize a few simplifications (an added dimension that can be ignored until the end, allowing you to re-use part one).&#13;
&#13;
[Day twenty-five](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week4/aoc_1225.md) asked for a minimum graph cut (of three edges).&#13;
This is a standard optimization problem, but rather than try to implement the [Stoer-Wagner algorithm](https://en.wikipedia.org/wiki/Stoer–Wagner_algorithm) I went with something from my PhD thesis: partitioning the graph based on the [Fiedler vector](https://en.wikipedia.org/wiki/Algebraic_connectivity#Fiedler_vector).&#13;
It turns out this gave the right answer on the first try, and the holidays were saved!&#13;
&#13;
## Conclusions&#13;
&#13;
The exercise was certainly helpful and informative, on multiple levels.&#13;
&#13;
First, it really reinforced for me that `WITH MUTUALLY RECURSIVE` is a very valuable tool to have access to when faced with a new problem.&#13;
Often your problem is a bunch of joins and reductions, but when it isn't you are immediately in a bit of a pickle.&#13;
In most cases, algorithmic challenges immediately gave way to recursive SQL.&#13;
&#13;
That being said, there's clearly an accessibility gap when reaching for recursive SQL.&#13;
I find the idioms approachable, but I've spent a while working with data-parallel algorithms, and have seen several of the tricks.&#13;
There's still plenty of work to do before the casual SQL author feels comfortable with recursive SQL.&#13;
&#13;
Second, the majority of my time was spent *debugging* rather than authoring.&#13;
This is a classic challenge with declaritive languages, who go from input program to output data in often inscrutable ways.&#13;
I borrowed some techniques from [debugging Datalog](https://yanniss.github.io/DeclarativeDebugging.pdf), but ideally the system itself would help me with this (and several research systems do provide integrated lineage).&#13;
&#13;
Debugging the logic of SQL queries only gets harder when the data are changing underneath you.&#13;
Techniques like spot checking data become infeasible when the data changes faster than you can observe records that are meant to line up.&#13;
Materialize should help in these cases, with maintained diagnostic views that represent assertions, or better violations thereof, whose contents spell out records that at some moment violated something that was meant to be true.&#13;
Materialize's `SUBSCRIBE` provides a full account of these views, reporting records that existed even for a moment, where anything other than 'always empty' represents an error in your SQL (or your assertions).&#13;
&#13;
Third, using Materialize in new and weird ways shook out several bugs.&#13;
We've already fixed them.&#13;
Dogfooding your own product, especially in surprising contexts, is a great way to forcibly increase your test coverage.&#13;
Issues ranged from the silly ('why would you name a table `count`?') to the abstruse (doubly nested recursive SQL blocks), but they spilled out in the early days and became less frequent as the weeks went on.&#13;
&#13;
Finally, the main conclusion was that it was all possible.&#13;
Despite substantial anxiety about whether and when we would need to bail out, defeated, the whole project did work out.&#13;
We were able to express a rich variety of computational tasks as data-driven SQL both expressed and maintained by Materialize.&#13;
&lt;!-- ##{'timestamp':1704171600}## --&gt;。</description><guid isPermaLink="true">https://nuowoo.github.io/blog/post/Materialize%20and%20Advent%20of%20Code.html</guid><pubDate>Tue, 02 Jan 2024 05:00:00 +0000</pubDate></item></channel></rss>