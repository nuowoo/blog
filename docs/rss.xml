<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Computer Scientist</title><link>http://nuowo.work.gd/</link><description>I am a researcher and computer scientist. I used to work in San Francisco, then I traveled a bit</description><copyright>Computer Scientist</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>http://nuowo.work.gd/</link></image><lastBuildDate>Sun, 10 Nov 2024 06:11:33 +0000</lastBuildDate><managingEditor>Computer Scientist</managingEditor><ttl>60</ttl><webMaster>Computer Scientist</webMaster><item><title>Demonstrating Operational Data with SQL</title><link>http://nuowo.work.gd//post/Demonstrating%20Operational%20Data%20with%20SQL.html</link><description>Databases, Big Data, and Stream Processors have long had the property that it can be hard to *demonstrate* their value, like in a demo setting.&#13;
Databases coordinate the work of multiple teams of independent workers, and don't shine when there is just one user.&#13;
Big Data systems introduce scalable patterns that can be purely overhead when the data fit on a single laptop.&#13;
Stream Processors aim to get the lowest of end-to-end latencies, but do nothing of any consequence on static data.&#13;
These systems demonstrate value when you have variety, volume, and velocity, and most demo data sets have none of these.&#13;
&#13;
Materialize, an operational data warehouse backed by scalable streaming systems, has all three of these challenges!&#13;
&#13;
Fortunately, Materialize is powerful enough to synthesize its own operational data for demonstration purposes.&#13;
In this post, we'll build a recipe for a generic live data source using standard SQL primitives and some Materialize magic.&#13;
We'll then add various additional flavors: distributions over keys, irregular validity, foreign key relationships.&#13;
It's all based off of Materialize's own [auction load generator](https://materialize.com/docs/sql/create-source/load-generator/#auction), but it's written entirely in SQL and something that I can customize as my needs evolve.&#13;
&#13;
The thing I find most amazing here is that with just SQL you can create *live* data. &#13;
Data that comes and goes, changes, and respects invariants as it does.&#13;
And that the gap between your idea for live data and making it happen is just typing some SQL.&#13;
&#13;
&#13;
&lt;!-- ##{'timestamp':1716094800}## --&gt;&#13;
&#13;
。</description><guid isPermaLink="true">http://nuowo.work.gd//post/Demonstrating%20Operational%20Data%20with%20SQL.html</guid><pubDate>Thu, 10 Oct 2024 05:19:06 +0000</pubDate></item><item><title>Computing and Maintaining Weird (Outer) Joins</title><link>http://nuowo.work.gd//post/Computing%20and%20Maintaining%20Weird%20%28Outer%29%20Joins.html</link><description>[Differential dataflow](https://github.com/TimelyDataflow/differential-dataflow) has a single join operator: `join`.&#13;
It takes two input collections, and for each `(key, val1)` and `(key, val2)` in the inputs it produces `(key, (val1, val2))` in the output.&#13;
This makes `join` a 'binary equijoin', where it fishes out exactly the exact matches on `key`.&#13;
This restriction is important, and powerful: when either input experiences a change, the `key` of the change is what directs us to the (other) input records that will help us produce the appropriate output change.&#13;
However, there are other 'joins' in the larger relational data world, and we need to support them as well.&#13;
&#13;
In this post we'll build up an implementation of a **multi-way outer equijoin**.&#13;
We'll start small, but arrive at the best way I know how to build these beasts out of existing parts.&#13;
Along the way, we'll &#13;
    get an introduction to how differential dataflow works, &#13;
    develop several ways to use it to implement joins of various stripes, and&#13;
    deploy these techniques together to take on the outer-est of (equi-)joins.&#13;
&#13;
Amazingly, to me at least, we end up needing to understand how to efficiently implement multi-way joins of sums of terms.&#13;
That is, how to efficiently implement&#13;
```&#13;
(A0 + A1 + A2) ⋈ (B0 + B1 + B2) ⋈ (C0 + ...) ⋈ ...&#13;
```&#13;
To be honest, I can't recall this pattern from my database education (such as it was), and I'd love any tips or pointers about where else this shows up.&#13;
If you get to the end and it all checks out as old-hat for you, I'd love to know about it!&#13;
&#13;
### Differential Dataflow and the Binary Equijoin `join`&#13;
&#13;
Differential dataflow is a framework for computing and then maintaining functions over continually changing volumes of data.&#13;
It manipulates *updates* to data, written as triples `(data, time, diff)` and indicating that at `time` the number of occurrences of `data` changes by `diff`.&#13;
Differential dataflow provides primitive operators like `map`, `filter`, `join`, `reduce`, and `iterate`, which users compose to build more complex functions.&#13;
Each operator translates input updates into the output updates that would result from continually re-evaluating the operator at every time. &#13;
Similarly, the composed dataflow of operators similarly produces output updates that correspond exactly to continual reevaluation on the changing inputs.&#13;
&#13;
The `join` operator applies to two input collections, for which their `data` have the shape `(key, _)`: pairs of some common 'key' type and potentially unrelated 'value' types.&#13;
The intended output is a tuple `(key, (val1, val2))` for each pair of inputs that have a matching `key`.&#13;
The output updates can be derived from first principles, but with enough head-scratching one can conclude that each pair of updates with matching key produces one output update:&#13;
&#13;
```   &#13;
    update1: ((key, val1), time1, diff1)     -- First input&#13;
    update2: ((key, val2), time2, diff2)     -- Second input&#13;
-&gt; &#13;
    ((key, (val1, val2)),  max(time1, time2),  diff1 * diff2)&#13;
     \-- output data --/   \----  time ----/   \--  diff --/&#13;
```&#13;
&#13;
We can respond to each input update by iterating over the updates in the *other* input with the same key, and use the rule above.&#13;
There are smarter ways to do this, consider for example the second update introducing and retracting a record before `time1`: we would produce two outputs that exactly cancel.&#13;
In any case, we'll need to retain *some* information about each input, ideally arranged by `key` so that these updates can be efficiently retrieved.&#13;
&#13;
Differential dataflow has a primitive called an 'arrangement', which is both a stream of updates and a maintained indexed form of their accumulation.&#13;
An arrangement translates a stream of updates into a sequence of indexed 'batches' of updates, each of which are indexed by `key`.&#13;
It also maintains a collection of these batches that serve as an indexed roll-up of the accumulated updates, using a structure analogous to a [log-structured merge-tree](https://en.wikipedia.org/wiki/Log-structured_merge-tree).&#13;
Arrangements are the primary mechanism to maintain 'state' as a dataflow runs, and specifically are what `join` uses: each input to `join` must be an arrangement, and if they are not then they will be arranged for you.&#13;
&#13;
### Technique 1: Shared Arrangements&#13;
&#13;
A key advantage to using arrangements is that they can be [*shared*](http://www.vldb.org/pvldb/vol13/p1793-mcsherry.pdf).&#13;
Arranged data can be used by any number of dataflows, avoiding the cost of an additional redundant arrangement.&#13;
As an example, imagine we have a collection of link data `(source, target)`, and we would like to compute and maintain those identifiers within three steps of some query set `query`.&#13;
If the data are arranged, say in an arrangement named `links`, we could write&#13;
```rust&#13;
// Join `query` against `links` three times, giving&#13;
// the identifiers three steps away from each query.&#13;
query.map(|query| (query, query))&#13;
     .join(links).map(|(step0, (query, step1))| (step1, query))&#13;
     .join(links).map(|(step1, (query, step2))| (step2, query))&#13;
     .join(links).map(|(step2, (query, step3))| (step3, query))&#13;
```&#13;
This fragment would naively require six arrangements, two for each `join` invocation.&#13;
However, we are able to re-use the `links` arrangement at no cost, and instead only introduce three arrangements, corresponding to the number of steps (0, 1, and 2) out from `query`.&#13;
These new arrangements can be substantially smaller than `links`, and the amount of work required to compute and maintain the results can be trivial even when `links` is enormous.&#13;
&#13;
### Technique 2: Functional Joins&#13;
&#13;
This one is a bit of cheat, in that by the end of it you may not be sure it is even a join.&#13;
&#13;
There are times, and we will see them coming up, where we want to join not against *data* but against a *function*.&#13;
For example, perhaps we have a collection of `(line, text)` of pairs of integers and strings, and we would like to split each `text` into the words it contains.&#13;
One way to do this is with `join`: the first input is our lines of text, and the second input is the quite large collection of pairs `(text, (pos, word))` each indicating a word that can be found in `text`.&#13;
&#13;
Rather than hope to implement this with `join`, because we couldn't hope to maintain the second collection, we could implement this with the `flat_map` operator instead.&#13;
```rust&#13;
// Convert each `text` into the words it contains.&#13;
lines.flat_map(|(line, text)| &#13;
    text.split_whitespace()&#13;
        .enumerate()&#13;
        .map(|(pos, word)| (line, text.clone(), (pos, word.to_owned())))&#13;
)&#13;
```&#13;
&#13;
At this point you may be wondering why we have called this a 'functional join' rather than a 'flat map'.&#13;
You are not wrong that `flat_map` is the best way to implement this.&#13;
However, we will need to prepare ourselves to see this pattern in joins, and understand that it is one way to implement something that may present as a `join`.&#13;
Each input record results in zero or many output records, determined by some key fields in the record.&#13;
&#13;
### Technique 3: Multi-way Joins&#13;
&#13;
Even managing a single join can be challenging, but invariably folks actually want to perform multiple joins at once.&#13;
Recall our `query` and `links` example, from just up above&#13;
```rust&#13;
// Join `query` against `links` three times, giving&#13;
// the identifiers three steps away from each query.&#13;
query.map(|query| (query, query))&#13;
     .join(links).map(|(step0, (query, step1))| (step1, query))&#13;
     .join(links).map(|(step1, (query, step2))| (step2, query))&#13;
     .join(links).map(|(step2, (query, step3))| (step3, query))&#13;
```&#13;
This performs three joins, and introduces new arrangements for the left inputs of each of the three `join` calls.&#13;
We argued that this could be small if `query` is small, and also if each of the intermediate results are small.&#13;
But if this isn't the case, then they might be large, and we might end up maintaining quite a lot of information.&#13;
&#13;
Let's take a different example that might not be so easy.&#13;
Imagine you start with a collection `facts` of raw data, and you want to enrich it using dimesion tables that translate foreign keys like 'user id' into further detail.&#13;
The additional detail may result in further keys you want to unpack, like addresses, zipcodes, and the sales agents they map to.&#13;
```rust&#13;
// Enrich facts with user, address, and sales agent information.&#13;
facts.map(|fact| (fact.user_id, fact)).join(users).map( .. )&#13;
     .map(|fact| (fact.addr_id, fact)).join(addrs).map( .. )&#13;
     .map(|fact| (fact.zipcode, fact)).join(agent).map( .. )&#13;
```&#13;
Lots and lots of data pipelines have this sort of enrichment in them, in part because 'normalized' database best practices are to factor apart this information.&#13;
Unfortunately, stitching it back together efficiently is an important part of these best practices.&#13;
&#13;
For this query, we may have arrangements of `users`, `addrs`, `agent`.&#13;
However, we are unlikely to have arrangements of the left inputs to each of the `join`s.&#13;
The very first left input, `facts` keyed by `user_id`, is plausibly something we might have pre-arranged, but the other two result from the query itself.&#13;
Naively implemented, we'll create second and third arrangements of enriched `fact` data, which can be really quite large.&#13;
&#13;
Fortunately, there is a trick for multiway joins that I have no better name for than ['delta joins'](https://github.com/TimelyDataflow/differential-dataflow/tree/master/dogsdogsdogs).&#13;
The gist is that rather than plan a multiway join as a sequence (or tree) of binary joins, as done in System R, you describe how the whole join will vary as a function of each input.&#13;
You can get this derivation by expanding out our derivation for binary joins, in terms of input updates, to multiple inputs.&#13;
You then independently implement each of these response functions for each input as best as you can and then compose their results.&#13;
&#13;
For example, our query above joins four relations: `facts`, `users`, `addrs`, and `agent`, subject to some equality constraints.&#13;
When `facts` changes, we need to look up enrichments in `users`, then `addrs`, then `agent` to find the change to enriched facts.&#13;
When `agent` changes, we need to find the affected `addrs`, then `users`, then `facts`, in order to update the enrichment of existing facts.&#13;
&#13;
```&#13;
-- rules for how to react to an update to each input.&#13;
-- elided: equality constraints for each join (⋈).&#13;
d_query/d_facts = d_facts ⋈ users ⋈ addrs ⋈ agent&#13;
d_query/d_users = d_users ⋈ addrs ⋈ agent ⋈ facts&#13;
d_query/d_addrs = d_addrs ⋈ agent ⋈ users ⋈ facts&#13;
d_query/d_agent = d_agent ⋈ addrs ⋈ users ⋈ facts&#13;
```&#13;
The overall changes to `query` result from adding together these update rules.&#13;
&#13;
What's different above is that each of the `d_term ⋈` joins are *ephemeral*: no one needs to remember the `d_` part of the input.&#13;
Each of these rules are implementable with what differential dataflow calls a `half_join`: an operator that responds to records in one input by look-ups into a second, and which does not respond to changes to the second input.&#13;
The `half_join` operator needs an arrangement of its second input, but not of its first input.&#13;
&#13;
This pattern has different arrangement requirements than the sequence of binary `join` operators.&#13;
Each collection needs an arrangement by those attributes by which it may be interrogated.&#13;
In the example above, the required arrangements end up being:&#13;
&#13;
1. input `facts` arranged by `user_id`,&#13;
2. input `users` arranged by `user_id` and also by `addr_id`,&#13;
3. input `addrs` arranged by `addr_id` and also by `zipcode`,&#13;
4. input `agent` arranged by `zipcode`.&#13;
&#13;
This ends up being six arrangements, just like before, but they are all arrangements we might reasonably have ahead of time.&#13;
The *incremental* arrangement cost of the query can be zero, if these arrangement are all pre-built.&#13;
&#13;
### Boss Battle: Left Outer Joins&#13;
&#13;
An 'outer' join is a SQL construct that is much like an standard ('inner') join except that any records that 'miss', i.e. do not match any other records, are still produced as output but with `NULL` values in columns we hoped to populate.&#13;
Outer joins are helpful in best-effort joins, where you hope to enrich some data, but can't be certain you'll find the enrichment and don't want to lose the input data if you cannot.&#13;
&#13;
For example, consider our `facts`, `users`, `addrs`, and `agent` scenario just above.&#13;
What would happen if there is a `user_id` that does not exist in `users`, or a `addr_id` that does not exist in `addrs`, or a `zipcode` that does not exist in `agent`?&#13;
Written as a conventional join, we would simply drop such records on the floor and never speak of them.&#13;
Sometimes that is the right thing to do, but often you want to see the data along with any *failures* to find the enrichments.&#13;
&#13;
If we take our example from above but use `LEFT JOIN` instead of `join`, we will keep even facts that do not match `users`, `addrs`, or `agent`.&#13;
```sql&#13;
-- Enrich facts with more data, but don't lose any.&#13;
facts LEFT JOIN users ON (facts.user_id = users.id)&#13;
      LEFT JOIN addrs ON (users.addr_id = addrs.id)&#13;
      LEFT JOIN agent ON (addrs.zipcode = agent.zc)&#13;
```&#13;
&#13;
There are also `RIGHT` and `FULL` joins, which respectively go in the other direction (e.g. output users that match no facts, with null fact columns) and in both directions (all bonus records that would be added to a `LEFT` or `RIGHT` join).&#13;
We are only going to noodle on `LEFT` joins, though the noodling should generalize just fine.&#13;
&#13;
To implement left joins, we'll need to find a way to express them in terms of the tools we have.&#13;
Those tools are .. the operators differential dataflow provides; things like `map`, `filter`, `join`, and `reduce` (no `iterate`. NO!).&#13;
&#13;
### Step one: turn LEFT JOINs into JOINs&#13;
&#13;
When we left join two collections, some records match perfectly as in an inner join, and some do not.&#13;
What do we have to add to the results of the inner join to get the correct answer?&#13;
Specifically, any keys that might be present in the first input, but are not present in the second input, could just be added to the second input with `NULL` values.&#13;
&#13;
```sql&#13;
-- Some facts exactly match some entry in users.&#13;
SELECT * FROM facts INNER JOIN users ON (facts.user_id = users.id)&#13;
-- Some facts totally miss, but need to match something.&#13;
UNION ALL&#13;
SELECT facts.*, NULL FROM facts&#13;
WHERE facts.user_id NOT IN (SELECT id FROM users)&#13;
```&#13;
This construction keeps the `INNER JOIN` pristine, but adds in `facts` extended by `NULL`s for any fact whose `user_id` is not found in `users`.&#13;
Although not totally clear, `NOT IN` results in a join between `facts` and distinct `users.id`.&#13;
This approach feels good, re-uses arrangements on `facts` and `users`, and is pretty close to what Materialize does for you at the moment.&#13;
&#13;
However, this technique is not great for multiway outer joins.&#13;
We need access to the left input (here: `facts`) to complete the outer join, and generally that input is the result of the outer join just before this one.&#13;
If we need to have that answer to form this query fragment, we don't have a story for how they all become one multiway inner join.&#13;
Likewise, Materialize currently plans a multiway outer join as a *sequence* of fragments like above that *involve* inner joins, but are not *an* inner join.&#13;
&#13;
### Step two: Multiway LEFT JOINS into Multiway JOINs&#13;
&#13;
Let's take the intuition above and see if we can preserve the join structure.&#13;
We want to produce a SQL fragment that is at its root just an inner join.&#13;
We will need to be careful that it should rely on base tables, not its direct inputs (what?).&#13;
&#13;
Let's start and we'll see where we get.&#13;
&#13;
First, let's rewrite the above fragment in a way that looks more like *one* inner join.&#13;
One one side we have `facts`, and on the other side .. at least `users` but also some other stuff?&#13;
For a first cut, that 'other stuff' is .. the `user_id`s in `facts` but not in `users`?&#13;
We could add those rows to `users`, with `NULL` values in missing columns, and see what we get!&#13;
&#13;
As it turns out we get totally the wrong answer. &#13;
Best intentions, of course, but the wrong answer.&#13;
I believe the right answer is expressed roughly this way, in SQL:&#13;
&#13;
```sql&#13;
-- Some facts exactly match some entry in users.&#13;
SELECT facts.*, users.* &#13;
FROM facts INNER JOIN users ON (facts.user_id = users.id)&#13;
-- Some facts totally miss, but could match something.&#13;
UNION ALL&#13;
WITH absent(id) AS (&#13;
    SELECT user_id FROM facts &#13;
    EXCEPT &#13;
    SELECT id FROM users&#13;
)&#13;
SELECT facts.*, NULL &#13;
FROM facts INNER JOIN absent ON (facts.user_id = absent.id)&#13;
-- Some facts have NULL `user_id` and refuse to be joined.&#13;
UNION ALL&#13;
SELECT facts.*, NULL&#13;
FROM facts WHERE facts.user_id IS NULL&#13;
```&#13;
&#13;
We do grab the `absent` keys, but importantly we produce `NULL` in their key columns.&#13;
We also need to deal with potentially null `user_id` values, which we do in the third clause, because SQL's `NULL` values do not equal themselves.&#13;
Again, best intentions, I'm sure.&#13;
&#13;
The good news is that we have framed the SQL in a way that looks like (taking some notational liberties):&#13;
```&#13;
  facts ⋈ users&#13;
+ facts ⋈ absent    -- with null outputs&#13;
+ facts ⋈ NULLs     -- only for null user_id&#13;
```&#13;
Each of the three joins are slightly different, but they all have the property that `facts` arranged by `user_id` is enough for them.&#13;
We can and will now factor out `facts` from these three terms, which puts us in a position to write our multiway left join as:&#13;
&#13;
```&#13;
-- Left join of facts, users, addrs, and agent.&#13;
facts ⋈ (users + absent(users) + NULL)&#13;
      ⋈ (addrs + absent(addrs) + NULL)&#13;
      ⋈ (agent + absent(agent) + NULL)&#13;
```&#13;
This is starting to look a bit more like the joins over sums of terms advertised in the beginning of the post.&#13;
For the moment, we are just going to add together the terms, though.&#13;
&#13;
There is quite a lot unsaid here, and the nature of the ⋈ varies a bit for each of the terms in parentheses.&#13;
You do have to populate the `absent(foo)` collections with values from base relations, rather than their immediate inputs.&#13;
And fortunately, SQL notwithstanding, differential dataflow *does* equate NULL with itself, and everything works out just fine.&#13;
Materialize [recently merged](https://github.com/MaterializeInc/materialize/pull/24345) an approach that looks like this for multiway outer joins.&#13;
It's early days, but we'll soon start exploring how this work for folks with stacks of left joins.&#13;
&#13;
But the story doesn't end here. &#13;
Somewhat stressfully, this approach takes existing inputs `facts`, `users`, `addrs`, and `agent` and .. fails to use any of their pre-existing arrangements.&#13;
It has some other performance issues as well.&#13;
&#13;
### Step three: Rendering JOINs of UNIONs&#13;
&#13;
The last step, or next step at least .. perhaps not the last, is to render these query plans efficiently.&#13;
At the moment we have no better plan than to treat the augmented collections as new collections, arrange them, and join them.&#13;
Roughly like so:&#13;
```&#13;
-- Left join of facts, users, addrs, and agent.&#13;
with users_aug as (users + absent(users) + NULL)&#13;
with addrs_aug as (addrs + absent(users) + NULL)&#13;
with agent_aug as (agent + absent(agent) + NULL)&#13;
facts ⋈ users_aug ⋈ addrs_aug ⋈ agent_aug&#13;
```&#13;
&#13;
These `_aug` collections are as big (somewhat bigger) than their unaugmented counterparts, and it feels somewhat bad to re-arrange them.&#13;
It feels bad that despite pre-arranging `users`, `addrs`, and `agent` we can re-use none of them.&#13;
It feels bad that all `NULL` values will be routed to a single worker just to find out that they map to `NULL`; lots of work for no surprise.&#13;
&#13;
However, we can get around all of these bad feels with some dataflow shenanigans.&#13;
Unfortunately, they are shenanigans that as far as I can tell neither Materialize nor SQL can describe.&#13;
&#13;
We have two strategies for evaluating multiway joins: as a sequence of binary joins, and using delta join rules.&#13;
The shenanigans are easier with the sequence of binary joins, so let's start there.&#13;
We are going to do something as simple as re-distributing over the `⋈` operator, performing each join the way we want.&#13;
We then add up the results of each step of the join rather than adding up the inputs to each step of the join.&#13;
&#13;
```&#13;
-- Left join of facts, users, addrs, and agent.&#13;
step0 = facts;&#13;
step1 = step0 ⋈ users + step0 ⋈ absent(users) + step0 ⋈ NULL;&#13;
step2 = step1 ⋈ addrs + step1 ⋈ absent(addrs) + step1 ⋈ NULL;&#13;
step3 = step2 ⋈ agent + step2 ⋈ absent(agent) + step2 ⋈ NULL;&#13;
step3&#13;
```&#13;
Each of these ⋈ operators are slightly different. &#13;
The first ⋈ in each row is the traditional equijoin.&#13;
The second ⋈ in each row is an equijoin that projects away matched keys and puts `NULL` in their place.&#13;
The third ⋈ in each row only matches nulls.&#13;
&#13;
However, in each line we only have to arrange non-null `stepx` and determine and arrange `absent(foo)`. &#13;
We can re-use existing arrangements of `users`, `addrs`, and `agent`.&#13;
The join with `NULL` can be implemented as a `flat_map` rather than by co-locating all null records for a `join` (omg finally explained).&#13;
&#13;
In actual fact, we can implement this in both SQL and Materialize, but in doing so we'll lose the multiway join planning benefit of avoiding intermediate arrangements.&#13;
We will need to arrange `stepx` for each `x`, and the nice folks with stack of left joins 30+ deep (yes, seriously) will be sitting on 30x as much data as they feel they should.&#13;
&#13;
To recover the benefits, let's grab the delta join construction from way up above. &#13;
I'll use `_aug` suffixes to remind us that it isn't going to be as easy as joining against the pre-arranged collections.&#13;
```&#13;
-- rules for how to react to an update to each input.&#13;
-- elided: equality constraints for each join (⋈).&#13;
d_query/d_facts     = d_facts     ⋈ users_aug ⋈ addrs_aug ⋈ agent_aug&#13;
d_query/d_users_aug = d_users_aug ⋈ addrs_aug ⋈ agent_aug ⋈ facts&#13;
d_query/d_addrs_aug = d_addrs_aug ⋈ agent_aug ⋈ users_aug ⋈ facts&#13;
d_query/d_agent_aug = d_agent_aug ⋈ addrs_aug ⋈ users_aug ⋈ facts&#13;
```&#13;
Ignore for the moment the fact that `d_users_aug` is complicated (an update to `users` may induce the opposite update to `absent(users)`).&#13;
Each line up above describes a sequence of `half_join` applications, which like `join` also distributes over `+`.&#13;
&#13;
```&#13;
  d_query/d_facts    &#13;
= d_facts ⋈ users_aug ⋈ addrs_aug ⋈ agent_aug&#13;
= ( &#13;
    d_step0 = d_facts;&#13;
    d_step1 = d_step0 ⋈ users + d_step0 ⋈ absent(users) + d_step0 ⋈ NULL;&#13;
    d_step2 = d_step1 ⋈ addrs + d_step1 ⋈ absent(addrs) + d_step1 ⋈ NULL;&#13;
    d_step3 = d_step2 ⋈ agent + d_step2 ⋈ absent(agent) + d_step2 ⋈ NULL;&#13;
    d_step3&#13;
)&#13;
```&#13;
Each time we need to do a `half_join`, we can unpack the right argument to it and conduct the half join as we see fit.&#13;
We can either `half_join` with a pre-existing arrangement, `half_join` with a new arrangement of absent values, or `flat_map` some `NULL` values into place.&#13;
&#13;
Writing the whole thing out is exhausting, especially for 30-deep stacks of left joins.&#13;
Fortunately this is something computers are good at.&#13;
Much like it now seems that they may be good at computing and maintaining deep stacks of left equijoins.&#13;
&#13;
### What's next?&#13;
&#13;
There is an expressivity gap to close between SQL/Materialize and differential dataflow.&#13;
I'm not aware of a SQL-to-SQL rewrite that gets us the desired implementation, because we cannot afford to distribute the joins out across the unions, and SQL does not have a `half_join` operator.&#13;
We're pondering options now, including expanding our lowest level IR to reflect e.g. half joins, and tweaking the renderer to recognize the idiom of joins between sums of terms.&#13;
There will certainly be some amount of measurement as we try and assess the remaining gap, and draw down the amount of time and resources spent on outer joins.&#13;
&#13;
I have a concurrent effort to spread the gospel of [referential integrity](https://en.wikipedia.org/wiki/Referential_integrity) so that we can turn those outer joins to inner joins.&#13;
You can understand how in weakly consistent systems you'd need the outer joins to cover for inconsistencies, but do you need it in a strongly consistent system like Materialize?&#13;
&#13;
Of course, if you've read this far you have an obligation to fill me in on what I've missed about all of this.&#13;
Is there an easier transform, one that doesn't end up joining terms that are themselves sums of useful constituents?&#13;
Do you have an exciting use case for maintaining stacks of outer joins, and you've been burned before?&#13;
Do reach out in these cases, and [take Materialize for a spin](https://materialize.com/register/) (though, if you have stacks of 30+ left joins, please reach out for some personal attention).&#13;
&#13;
&lt;!-- ##{'timestamp':1710738000}## --&gt;。</description><guid isPermaLink="true">http://nuowo.work.gd//post/Computing%20and%20Maintaining%20Weird%20%28Outer%29%20Joins.html</guid><pubDate>Mon, 18 Mar 2024 05:00:00 +0000</pubDate></item><item><title>Materialize and Advent of Code</title><link>http://nuowo.work.gd//post/Materialize%20and%20Advent%20of%20Code.html</link><description>&#13;
&#13;
This past year Team Materialize struck out to do each day of 2023's [Advent of Code](https://adventofcode.com/2023), an annual programming event with thought-provoking problems that you are encouraged to approach from non-standard directions.&#13;
We figured we'd try and use SQL for the whole thing.&#13;
&#13;
SQL is a bold choice because it is meant for querying data, and not as much for general computation.&#13;
Several of the problems call for interesting algorithms, specific data structures, and some flexibility.&#13;
However, Materialize's core thesis is that you can do so much more with SQL that just query your data.&#13;
If you want to move operational logic from bespoke code into SQL, you'll need to be able to express that logic.&#13;
And so, Advent of Code was a great opportunity to stretch our legs, and fingers, and see just how much logic fits into SQL.&#13;
&#13;
### Preliminaries&#13;
&#13;
There's a lot of content in the month's problems.&#13;
There are 49 problems, and although there is some overlap really there is too much to say about all of them.&#13;
We aren't going to recount each of the problems, the whimsical backstories, and the shape of the problem inputs.&#13;
We'll try and flag some surprising moments, though, and you should dive into those problems if you are keen (they can each be done on their own).&#13;
&#13;
I (Frank) wrote all of my solutions using Materialize's `WITH MUTUALLY RECURSIVE` even when recursion was not required.&#13;
This just helped me start writing, as the blocks allow you to just start naming subqueries and writing SQL.&#13;
&#13;
My solutions all had the same skeletal structure:&#13;
```sql&#13;
WITH MUTUALLY RECURSIVE&#13;
&#13;
    -- Parse the problem input into tabular form.&#13;
    lines(line TEXT) AS ( .. ),&#13;
&#13;
    -- SQL leading up to part 1.&#13;
    part1(part1 BIGINT) AS ( .. ),&#13;
&#13;
    -- SQL leading up to part 2.&#13;
    part2(part2 BIGINT) AS ( .. ) &#13;
&#13;
SELECT * FROM part1, part2;&#13;
```&#13;
&#13;
As mentioned, we won't always need recursion.&#13;
However, we often do use recursion, and may even need it.&#13;
We'll call this out, as the use (and ease) of recursion in SQL was one of the main unlocks.&#13;
&#13;
### Week one&#13;
&#13;
[Day one](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1201.md) was largely about text manipulation, specifically extracting numbers from text, and was well-addressed by using regular expressions to manipulate and search the text. &#13;
&#13;
[Day two](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1202.md) was largely about aggregation: rolling up counts and maxima for games involving numbers of colored cubes; SQL did great here.&#13;
&#13;
[Day three](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1203.md) has inputs in grid form, where there can be interaction between multiple lines (with symbols above or below others). &#13;
You are looking for runs of numerals, and I used `WMR` to track these down; reportedly you can also use regular expressions, but I was not clever enough for that!&#13;
&#13;
[Day four](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week4/aoc_1225.md) introduced scratch cards where each line of input has some winners and losers. &#13;
This was easy SQL until part two, in which winners give you other scratch cards, which have winners that give you other scratch cards, which .. you can see the recursion. &#13;
Despite being wordy and complicated, the SQL isn't so bad:&#13;
```sql&#13;
    -- PART 2&#13;
    -- Each card provides a copy of the next `score` cards.&#13;
    expanded(card INT, score BIGINT) AS (&#13;
        SELECT * FROM matches&#13;
        UNION ALL&#13;
        SELECT&#13;
            matches.card,&#13;
            matches.score&#13;
        FROM&#13;
            expanded,&#13;
            matches,&#13;
            generate_series(1, expanded.score) as step&#13;
        WHERE&#13;
            expanded.card + step = matches.card&#13;
    ),&#13;
    part2(part2 BIGINT) AS ( SELECT COUNT(*) FROM expanded)&#13;
```&#13;
This would be tricky to do with non-recursive SQL, as the data itself tells us how to unfold the results.&#13;
Hooray for recursion!&#13;
&#13;
[Day five](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1205.md) was a bit of a bear.&#13;
It was the same day we were doing a Materialize on-site and we were all a bit distracted, but also it was pretty beefy. &#13;
You first have to 'route' various elements through a sequence of remappings, whose length is defined in the data.&#13;
You then have to expand that out to routing whole intervals (rather than elements), and .. there is just lots of potential for error.&#13;
I used recursive SQL to handle all the remapping, but other folks just expanded out their SQL for each of the (ten-ish) remappings.&#13;
&#13;
[Day six](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1206.md) was about whether you knew (or were willing to learn about) the [quadratic formula](https://en.wikipedia.org/wiki/Quadratic_formula).&#13;
&#13;
[Day seven](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1207.md) is about scoring poker hands, using some new rules for tie breaking. &#13;
This was mostly SQL aggregation, as the numbers of each card in each hand largely determine the outcome, other than tie-breaking where I learned about the [`translate`](https://materialize.com/docs/sql/functions/#translate) function.&#13;
&#13;
### Week two&#13;
&#13;
[Day eight](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1208.md) involved some graph navigation (recursion), and some mathematics.&#13;
The mathematics were of the form 'notice that various things are relatively prime', and it was important to rely on SQL as a tool to support reasoning, as opposed to directly attacking the specified computation.&#13;
In this case, my problem called for 14,935,034,899,483 steps, and no tool is going to make direct simulation be the right answer.&#13;
&#13;
[Day nine](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1209.md) was a refreshing introduction to polynomials, and how if you take enough derivatives of them they end up at zero.&#13;
The task was to do this, repeatedly difference adjacent measurements, or adjacent differences, etc., until you get all zeros.&#13;
Then, integrate back up to get projections in the forward and reverse direction.&#13;
I used recursion here to accommodate the unknown degree of the polynomial (somewhere in the twenties).&#13;
&#13;
[Day ten](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1210.md) presents you with a grid of pipe (symbols `|`, `-`, `J`, `7`, `F`, and `L`), and questions about how long a loop of pipe is, and then how many cells are contained within it. The first part involved recursion, and I used it again for a dynamic programming solution to the second part.&#13;
&#13;
[Day eleven](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1211.md) presents a grid of 'galaxies' and has you calculate the distance between pairs (the L1 or 'Manhattan' distance, always the sum of absolute values of coordinate differences). &#13;
Parts one and two were the same, but with different magnitudes of numbers.&#13;
No recursion here!&#13;
&#13;
[Day twelve](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1211.md) was about sequence alignment, matching partial observations with hard constraints.&#13;
Dynamic programming was a great solution here, using recursion.&#13;
&#13;
[Day thirteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1213.md) had grids of observations with the hypothesis that each is mirrored, horizontally or vertically, at some point that you need to find.&#13;
SQL and subqueries were a great way to validate hypothetical mirroring axes.&#13;
&#13;
[Day fourteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week2/aoc_1214.md) was a treat, in that it used *nested* recursion: a `WMR` block within a `WMR` block.&#13;
The problem was simulation of rocks that roll in cardinal directions, changing the direction ninety degrees, and repeating.&#13;
Each simulation was recursive (rocks roll until they stop), and we were meant to repeat the larger progress a great many times (1,000,000,000 cycles).&#13;
The only bummer here was the amount of copy/paste re-use, as each of the four cardinal directions had different subqueries.&#13;
&#13;
### Week three&#13;
&#13;
[Day fifteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1215.md) has you implement a hash function, and then a hash map.&#13;
Recursion was a handy way to walk through the input to be hashed, though the hash function was simple enough that you could have used math directly instead. &#13;
The second part (the hash map) did not require recursion, as rather than simulate the operations you could leap to the final state you were looking for.&#13;
&#13;
[Day sixteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1216.md) was about bouncing light around in a grid, and seeing how many grid cells are illuminated.&#13;
The illumination process was classic recursive SQL, where you keep expanding `(row, col, dir)` triples until the set reaches a fixed point.&#13;
In the second part the light sources had an origin, which is just a fourth column to add, tracking the source of each ray of light.&#13;
&#13;
[Day seventeen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1217.md) is a pathfinding problem, with constraints on how you move around the path (not too short or too long in any direction at once).&#13;
Classic recursive SQL to implement [Bellman-Ford](https://en.wikipedia.org/wiki/Bellman–Ford_algorithm).&#13;
&#13;
[Day eighteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1218.md) provides instructions of how a digger will move around, excavating earth, and asks you to calculate the area.&#13;
This is an opportunity to learn about the [Trapezoid formula](https://en.wikipedia.org/wiki/Shoelace_formula#Trapezoid_formula) for computing the area as the addition and subtraction of trapezoid areas.&#13;
&#13;
[Day nineteen](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1219.md) sneakily introduces you to [binary space partitioning](https://en.wikipedia.org/wiki/Binary_space_partitioning), where rules based on inequality tests route you to new rules, until eventually you reach some rule that says 'accept' or 'reject'.&#13;
This was all pretty easy, except for a substantial amount of SQL overhead related to the various symbols and characters and coordinates all of which required their own columns.&#13;
&#13;
[Day twenty](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1220.md) presents you with the simulation of an asynchronous circuit, and this is the day that almost broke me.&#13;
Mechanically the SQL isn't that complicated, but *debugging* the SQL was a real challenge.&#13;
It got done over the course of a quite long train ride into the evening.&#13;
&#13;
[Day twenty-one](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week3/aoc_1221.md) was another example of some (recursive) SQL for grid exploration, followed by some mathematics.&#13;
In this case the grid exploration was standard, determining reachable locations on the grid, and then the math was quadratic extrapolation from a sequence of measurements (to something too large to actually evaluate, an answer of 621,289,922,886,149 reachable states).&#13;
&#13;
### Week four&#13;
&#13;
The last week was shorter, but also culminated in some pretty exciting problems and techniques.&#13;
&#13;
[Day twenty-two](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week4/aoc_1222.md) had shapes made of cubes falling into a well, and coming to rest on others (or the ground).&#13;
There were then questions about how many pieces are load bearing, and also for each load bearing piece how many others would fall if they were removed.&#13;
Dropping the pieces used recursive SQL, determining the load bearing pieces did not, but then scoring the load bearing pieces again required recursion.&#13;
&#13;
[Day twenty-three](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week4/aoc_1223.md) is a classic example of finding the 'longest path' in a directed graph.&#13;
This is a relatively easy problem when the input is acyclic (part one), and it is NP-hard when the input may have cycles (part two).&#13;
Part one was a mostly vanilla recursive SQL query, and part two encoded the 32 prior state options in a large integer and just did a lot of work.&#13;
&#13;
[Day twenty-four](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week4/aoc_1224.md) had most folks reach for a numerical solver, something like Mathematica or z3.&#13;
That is less easy in SQL, and I needed to learn some math instead (specifically how to find the intersection of two line segments).&#13;
Although part two seemed quite complex, it ended up being relatively easy when you realize a few simplifications (an added dimension that can be ignored until the end, allowing you to re-use part one).&#13;
&#13;
[Day twenty-five](https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week4/aoc_1225.md) asked for a minimum graph cut (of three edges).&#13;
This is a standard optimization problem, but rather than try to implement the [Stoer-Wagner algorithm](https://en.wikipedia.org/wiki/Stoer–Wagner_algorithm) I went with something from my PhD thesis: partitioning the graph based on the [Fiedler vector](https://en.wikipedia.org/wiki/Algebraic_connectivity#Fiedler_vector).&#13;
It turns out this gave the right answer on the first try, and the holidays were saved!&#13;
&#13;
## Conclusions&#13;
&#13;
The exercise was certainly helpful and informative, on multiple levels.&#13;
&#13;
First, it really reinforced for me that `WITH MUTUALLY RECURSIVE` is a very valuable tool to have access to when faced with a new problem.&#13;
Often your problem is a bunch of joins and reductions, but when it isn't you are immediately in a bit of a pickle.&#13;
In most cases, algorithmic challenges immediately gave way to recursive SQL.&#13;
&#13;
That being said, there's clearly an accessibility gap when reaching for recursive SQL.&#13;
I find the idioms approachable, but I've spent a while working with data-parallel algorithms, and have seen several of the tricks.&#13;
There's still plenty of work to do before the casual SQL author feels comfortable with recursive SQL.&#13;
&#13;
Second, the majority of my time was spent *debugging* rather than authoring.&#13;
This is a classic challenge with declaritive languages, who go from input program to output data in often inscrutable ways.&#13;
I borrowed some techniques from [debugging Datalog](https://yanniss.github.io/DeclarativeDebugging.pdf), but ideally the system itself would help me with this (and several research systems do provide integrated lineage).&#13;
&#13;
Debugging the logic of SQL queries only gets harder when the data are changing underneath you.&#13;
Techniques like spot checking data become infeasible when the data changes faster than you can observe records that are meant to line up.&#13;
Materialize should help in these cases, with maintained diagnostic views that represent assertions, or better violations thereof, whose contents spell out records that at some moment violated something that was meant to be true.&#13;
Materialize's `SUBSCRIBE` provides a full account of these views, reporting records that existed even for a moment, where anything other than 'always empty' represents an error in your SQL (or your assertions).&#13;
&#13;
Third, using Materialize in new and weird ways shook out several bugs.&#13;
We've already fixed them.&#13;
Dogfooding your own product, especially in surprising contexts, is a great way to forcibly increase your test coverage.&#13;
Issues ranged from the silly ('why would you name a table `count`?') to the abstruse (doubly nested recursive SQL blocks), but they spilled out in the early days and became less frequent as the weeks went on.&#13;
&#13;
Finally, the main conclusion was that it was all possible.&#13;
Despite substantial anxiety about whether and when we would need to bail out, defeated, the whole project did work out.&#13;
We were able to express a rich variety of computational tasks as data-driven SQL both expressed and maintained by Materialize.&#13;
&lt;!-- ##{'timestamp':1704171600}## --&gt;。</description><guid isPermaLink="true">http://nuowo.work.gd//post/Materialize%20and%20Advent%20of%20Code.html</guid><pubDate>Tue, 02 Jan 2024 05:00:00 +0000</pubDate></item><item><title>Materialize and Memory</title><link>http://nuowo.work.gd//post/Materialize%20and%20Memory.html</link><description>Materialize keeps your SQL views up to date as the underlying data change.&#13;
The value Materialize provides comes from how promptly it reflects new data, but its *cost* comes from the computer resources needed to achieve this.&#13;
While we often talk about the value Materialize provides, and work continually to improve it, we are also hard at work continually reducing the cost.&#13;
This work has had marked impact recently, and it felt like a great time to tell you about it, and the reductions in cost. &#13;
&#13;
Materialize maintains your source and derived data (e.g. any materialized view), durably in economical cloud storage.&#13;
However, to promptly maintain views and serve results we want to use much more immediately accessible storage.&#13;
This storage, memory or as we'll see soon local disk, acts as a cache that must be fast, but needn't be durable.&#13;
And of course, we would all like it to be as economical as possible.&#13;
&#13;
We've been dialing down the amount of 'overhead' associated with each intermediate maintained record in Materialize.&#13;
We started some months ago at roughly 96 bytes of overhead (we will explain why), and we are now closing in on between 0 and 16 bytes of overhead, depending.&#13;
This first wave of results have already seen many users memory requirements reduced by nearly 2x.&#13;
Moreover, we've laid the groundwork for further improvements, through techniques like spill-to-disk, columnar layout, and compression.&#13;
This further work comes at the cost of CPU cycles, but for the moment CPU cycles are abundant (and elastic) in a way that bytes of memory are not.&#13;
&#13;
In this post we'll map out where we started, detail the relatively simple steps we've taken to effectively reduce the overhead, and sketch the future we've opened up with some help from Rust.&#13;
&#13;
### The Fundemantals of Remembered Things&#13;
&#13;
Materialize models all data as relational rows, each of which has some number of columns, each of which contains one of a few different types of data.&#13;
Over time the rows come and go, each changing their multiplicity through what we call 'updates': triples `(data, time, diff)`.&#13;
Each update indicates a row `data` that at some moment `time` experiences a change `diff` in its multiplicity.&#13;
These changes are often `+1` (insertion) or `-1` (deletion), or a mix of two or more (updates).&#13;
&#13;
Materialize maintains *indexed state* by viewing each `data` as a pair `(key, val)`, where `key` are some signified columns and `val` the remaining columns.&#13;
When you create an index on a collection of data, you specify columns by which you hope to access the data; those columns define `key` and `val` for each `data`.&#13;
We regularly want to fetch the history of some `key`: the associated `val`s and the `(time, diff)` changes they have undergone.&#13;
&#13;
The abstract data type we use maps from `key` to `val` to a list of `(time, diff)` pairs.&#13;
In Rust you might use the `HashMap` type to support this abstraction:&#13;
```rust&#13;
/// Map from key, to value, to a list of times and differences.&#13;
type Indexed&lt;K, V, T, D&gt; = HashMap&lt;K, HashMap&lt;V, Vec&lt;(T, D)&gt;&gt;&gt;;&#13;
```&#13;
&#13;
For various reasons we won't actually want to use `HashMap` itself, and instead prefer other data structures that provide different performance characteristics.&#13;
For example, we are interested in minimizing the number and size of allocations, and optimizing for both random and sequential read and write throughput.&#13;
&#13;
&#13;
&lt;!-- ##{'timestamp':1703048400}## --&gt;。</description><guid isPermaLink="true">http://nuowo.work.gd//post/Materialize%20and%20Memory.html</guid><pubDate>Wed, 20 Dec 2023 05:00:00 +0000</pubDate></item><item><title>Doing Business with Recursive SQL</title><link>http://nuowo.work.gd//post/Doing%20Business%20with%20Recursive%20SQL.html</link><description>&#13;
Let's take a look at a fundamental problem in economics, with applications to doing business: matching up producers and consumers of some abstract resource, in a way that appeals to all of the participants.&#13;
&#13;
Imagine we have a set of producers and a set of consumers, each of whom wants to be matched to one member of the opposite type, and each of them have some (not neccesarily shared) preference for the other.&#13;
The problem was initially presented in the language of 'stable marriage', but it applies to any pairings where the participants have opinions about those they might be paired with.&#13;
The framing has also been applied to matching hospital residents with hospitals, application clients with server capacity, and in this post hungry engineers and their lunching options.&#13;
You should be able to apply it to a variety of settings, most fruitfully when the matched things come with a rich variety of opinions about each other.&#13;
&#13;
To spill the beans, there already is an algorithm for [stable matching](https://en.wikipedia.org/wiki/Stable_marriage_problem), and we're just going to implement it in recursive SQL.&#13;
You might not have thought of SQL as a language for *algorithms*, and conventional SQL is certainly very limited in this respect.&#13;
However, recursive SQL can be a great fit, and when it is there's no reason not to just lean on the existing approaches!&#13;
&#13;
### Stable Matching in SQL&#13;
&#13;
We will work off of a table `prefs` that will store the mutual preferences between pairs of producer and consumer.&#13;
Not every pair needs to be represented here, and any pairs that are absent will just be taken to be non-viable.&#13;
We'll call producers and consumers by `name1` and `name2`, respectively, which aren't very evocative but are easier to type.&#13;
Each pair will have integer preferences `pref1` and `pref2` for each other, where smaller numbers mean higher preference (imaging them as a ranking).&#13;
&#13;
```sql&#13;
-- Each entry indicates a potential connection between `name1` and `name2`.&#13;
-- Each has a numerical preference for this, where we'll take smaller to be better.&#13;
-- The goal is to match up `(name1, name2)` pairs where each prefers the other over&#13;
-- any other 'stable' pairing (someone else who likes them back enough not to leave).&#13;
CREATE TABLE prefs(name1 TEXT, pref1 INT, name2 TEXT, pref2 INT);&#13;
```&#13;
&#13;
Our goal is to pull out a subset of `prefs` where each `name1` and `name2` occur at most once.&#13;
Also, we shouldn't leave behind any pairing in which each prefers the other more than the pair they were assigned.&#13;
That second part is where the algorithm comes in.&#13;
&#13;
Of course, we'll want some example preferences to work with.&#13;
Let's start with some hungry engineers and food options.&#13;
Thematically, let's imagine that each human prefers the foods based on their own unaccountable tastes, and the food options (restaurants) prefer the humans based on their distance (because each's price doesn't vary as a function of the human, but the delivery cost does).&#13;
&#13;
Here's some made up data that will show off what we are trying to do.&#13;
&#13;
```sql&#13;
-- Imagine people have a preference for foods that idk is based on its price.&#13;
-- Imagine restaurants have a preference for people based on their distance.&#13;
INSERT INTO prefs VALUES&#13;
('frank',  4, 'ramen', 1),  -- frank needs food, and ramen likes him best&#13;
('arjun',  1, 'ramen', 3),  -- arjun lovel ramen, but it is unrequited.&#13;
('arjun',  3, 'sushi', 4),  -- arjun can tolerate sushi; they prefer him to nikhil.&#13;
('nikhil', 1, 'sushi', 5);  -- nikhil is too far away to safely enjoy sushi.&#13;
```&#13;
&#13;
If we study the data (and the comments) we will find that one stable matching is &#13;
```&#13;
 name1 | pref1 | name2 | pref2 &#13;
-------+-------+-------+-------&#13;
 arjun |     3 | sushi |     4&#13;
 frank |     4 | ramen |     1&#13;
(2 rows)&#13;
```&#13;
Nikhil doesn't get lunch in this story, which is too bad, but is a demonstration of the constraints: not everyone gets what they want.&#13;
Arjun also doesn't get what he wants, which is ramen, because it isn't stable: the ramen-ya would just hit Frank up and they'd do lunch instead.&#13;
It turns out there aren't other stable matchings for this data, but in general there can be many.&#13;
&#13;
How do we arrive at a stable matching?&#13;
Fortunately, way back in 1962, [Gale and Shapley proposed](https://web.archive.org/web/20170925172517/http://www.dtic.mil/get-tr-doc/pdf?AD=AD0251958) an algorithm to do just that.&#13;
In one variant: each producer proposes to satisfy their favorite consumer, each consumer definitively rejects all but the best proposal, and spurned proposers repeat with their next best options, until the rejections stop or they run out of options.&#13;
&#13;
It's pretty much recursion, isn't it? &#13;
And moreover, each of the steps are pretty easy SQL.&#13;
Let's write them down!&#13;
&#13;
```sql&#13;
-- Iteratively develop proposals and rejections.&#13;
WITH MUTUALLY RECURSIVE&#13;
    -- Pairings that have yet not been explicitly rejected.&#13;
    active(name1 TEXT, pref1 INT, name2 TEXT, pref2 INT) AS (&#13;
        SELECT * FROM prefs&#13;
        EXCEPT ALL&#13;
        SELECT * FROM rejects&#13;
    ),&#13;
    -- Each `name1` proposes to its favorite-est `name2`.&#13;
    proposals(name1 TEXT, pref1 INT, name2 TEXT, pref2 INT) AS (&#13;
        SELECT DISTINCT ON (name1) *&#13;
        FROM active&#13;
        ORDER BY name1, pref1, name2, pref2&#13;
    ),&#13;
    -- Each `name2` tentatively accepts the proposal from its favorite-est `name1`&#13;
    tentative(name1 TEXT, pref1 INT, name2 TEXT, pref2 INT) AS (&#13;
        SELECT DISTINCT ON (name2) *&#13;
        FROM proposals&#13;
        ORDER BY name2, pref2, name1, pref1&#13;
    ),&#13;
    -- Proposals that are not accepted become definitively rejected.&#13;
    rejects(name1 TEXT, pref1 INT, name2 TEXT, pref2 INT) AS (&#13;
        SELECT * FROM rejects&#13;
        UNION ALL&#13;
        SELECT * FROM proposals&#13;
        EXCEPT ALL&#13;
        SELECT * FROM tentative&#13;
    )&#13;
-- The tentative accepts become real accepts!&#13;
SELECT * FROM tentative&#13;
```&#13;
&#13;
Each of these steps--proposal, tentative acceptance, and rejection--follow the written description up above.&#13;
The behavior of the `WITH MUTUALLY RECURSIVE` block is to evaluate each term in order, then repeat from the top, until they stop changing.&#13;
It's worth a moment reading and maybe re-reading the SQL to convince yourself that there is at least some relationship to the written plan.&#13;
&#13;
If we run the query, we get the result up above.&#13;
```&#13;
 name1 | pref1 | name2 | pref2 &#13;
-------+-------+-------+-------&#13;
 arjun |     3 | sushi |     4&#13;
 frank |     4 | ramen |     1&#13;
(2 rows)&#13;
```&#13;
&#13;
These results are great to see, but we are here to *maintain* computation, as input data change.&#13;
We can also [`SUBSCRIBE`](https://materialize.com/docs/sql/subscribe/) to the query, and then modify the input to see some output changes.&#13;
&#13;
Each subscribe starts with a snapshot, and it should be (and is) the answer just up above.&#13;
```&#13;
1702997600437	 1	arjun	3	sushi	4&#13;
1702997600437	 1	frank	4	ramen	1&#13;
```&#13;
To remind you, or introduce you, `SUBSCRIBE` produces output whose first column is the timestamp of some update event, followed by a change in count (here `1` for both records), followed by payload columns matching what you'd see from a `SELECT` query.&#13;
&#13;
At this point, let's introduce the possibility that Frank would happily eat a sandwich instead of ramen.&#13;
```&#13;
materialize=&gt; insert into prefs values ('frank', 2, 'sando', 3);&#13;
```&#13;
As soon as I press enter, a bunch of changes spill out of the subscription:&#13;
```&#13;
1702997625810	 1	arjun	1	ramen	3&#13;
1702997625810	-1	arjun	3	sushi	4&#13;
1702997625810	 1	frank	2	sando	3&#13;
1702997625810	-1	frank	4	ramen	1&#13;
1702997625810	 1	nikhil	1	sushi	5&#13;
```&#13;
How do we read this? &#13;
Arjun has a shuffle where he gains a matching with ramen and yields his sushi seat.&#13;
Frank switches to a sandwich from ramen.&#13;
And Nikhil gets lunch! &#13;
Sushi isn't happy about it, mind you, but lunch occurs for all producers and consumers.&#13;
&#13;
Importantly, there is one timestamp (`1702997625810`), indicating that all five changes happen atomically, at exactly the same moment.&#13;
Neither producer nor consumer will be over-committed, even for a moment, on account of Materialize doesn't screw around with consistency and correctness.&#13;
&#13;
### Generalizing Stable Matching&#13;
&#13;
Let's imagine that each restaurant can serve more than one person, and instead has an integer 'capacity'.&#13;
What do we need to change about our process?&#13;
Let's introduce tables `producer_capacity` and `consumer_capacity`, which each hold a name and an integer capacity.&#13;
&#13;
```sql&#13;
-- Each producer and consumer have an integer number of matches they can participate in.&#13;
CREATE TABLE producer_capacity(name TEXT, cap INT);&#13;
CREATE TABLE consumer_capacity(name TEXT, cap INT);&#13;
```&#13;
&#13;
What we need to tweak about the algorithm is that each producer proposes at their top `cap` opportunities, and each consumer tentatively accepts their top `cap` proposals.&#13;
&#13;
Where above we have fragments that look like so, to pick the top singular opportunity,&#13;
```sql&#13;
    -- Each `name1` 'proposes' to its favorite-est `name2`.&#13;
    proposals(name1 TEXT, pref1 INT, name2 TEXT, pref2 INT) AS (&#13;
        SELECT DISTINCT ON (name1) *&#13;
        FROM active&#13;
        ORDER BY name1, pref1, name2, pref2&#13;
    ),&#13;
```&#13;
we'll want to update these to pick the top `cap` opportunities:&#13;
```sql&#13;
    -- Each `name1` 'proposes' to its `cap` favorite-est `name2`.&#13;
    proposals(name1 TEXT, pref1 INT, name2 TEXT, pref2 INT) AS (&#13;
        SELECT lat.* FROM producer_capacity, &#13;
        LATERAL (&#13;
            -- pick out the best `cap` opportunities&#13;
            SELECT * FROM active&#13;
            WHERE active.name1 = producer_capacity.name&#13;
            ORDER BY active.pref1&#13;
            LIMIT producer_capacity.cap&#13;
        ) lat&#13;
    ),&#13;
```&#13;
This new SQL is a bit more complicated than the old SQL, but the `LATERAL` join allows us to invoke `LIMIT` with an argument that depends on `cap` rather than a limit of exactly one that `DISTINCT ON` provides.&#13;
&#13;
We'll need to do the same thing for our tentative accepts, using `consumer_capacity`.&#13;
```sql&#13;
    -- Each `name2` tentatively 'accepts' the proposal from its favorite-est `name1`&#13;
    tentative(name1 TEXT, pref1 INT, name2 TEXT, pref2 INT) AS (&#13;
        SELECT lat.* FROM consumer_capacity, &#13;
        LATERAL (&#13;
            -- pick out the best `cap` proposals&#13;
            SELECT * FROM proposals&#13;
            WHERE proposals.name2 = consumer_capacity.name&#13;
            ORDER BY proposals.pref2&#13;
            LIMIT consumer_capacity.cap&#13;
        ) lat&#13;
    ),&#13;
```&#13;
&#13;
With unit capacities we'll see the same results as before. &#13;
However, let's introduce Nikhil to ramen, which it turns out he likes.&#13;
```&#13;
materialize=&gt; insert into prefs values ('nikhil', 1, 'ramen', 2);&#13;
```&#13;
This has some immediate consequences for our subscription to the matching.&#13;
I restarted it because we need to pick up the new query with capacities, but the new snapshot put us right back where we were before.&#13;
```&#13;
1703011622743	-1	arjun	1	ramen	3&#13;
1703011622743	 1	arjun	3	sushi	4&#13;
1703011622743	 1	nikhil	1	ramen	2&#13;
1703011622743	-1	nikhil	1	sushi	5&#13;
```&#13;
This dislodges Arjun, who is now back on the sushi plan, because the ramen folks are fully occupied. &#13;
But only because they are occupied.&#13;
Let's update their capacity to two, which should give Arjun a seat.&#13;
```&#13;
materialize=&gt; update consumer_capacity set cap = 2 where name = 'ramen';&#13;
```&#13;
```&#13;
1703011679155	 1	arjun	1	ramen	3&#13;
1703011679155	-1	arjun	3	sushi	4&#13;
```&#13;
And, to rattle things a bit more let's imagine the sandwich shop is sold out and their capacity drops down to zero.&#13;
```&#13;
materialize=&gt; update consumer_capacity set cap = 0 where name = 'sando';&#13;
```&#13;
```&#13;
1703011883207	-1	arjun	1	ramen	3&#13;
1703011883207	 1	arjun	3	sushi	4&#13;
1703011883207	-1	frank	2	sando	3&#13;
1703011883207	 1	frank	4	ramen	1&#13;
```&#13;
Poor Arjun is just getting bounced around. &#13;
He decides he really wants some ramen, and offers a cash incentive which updates their preference for him dramatically. &#13;
We'll model this by just tweaking their preference directly.&#13;
&#13;
```&#13;
materialize=&gt; update prefs set pref2 = 1 where name1 = 'arjun' and name2 = 'ramen';&#13;
```&#13;
```&#13;
1703012011622	 1	arjun	1	ramen	1&#13;
1703012011622	-1	arjun	3	sushi	4&#13;
1703012011622	-1	nikhil	1	ramen	2&#13;
1703012011622	 1	nikhil	1	sushi	5&#13;
```&#13;
And Arjun is back on ramen and Nikhil is back on sushi.&#13;
&#13;
### Recursive SQL and Doing Business&#13;
&#13;
There are lots of changes the input may experience, many of which lead to changed output.&#13;
Like in life, the world changes around you and you may need to promptly update your plans for the world.&#13;
Materialize and recursive SQL are here to make sure you are always looking at the correct output, moment by moment.&#13;
&#13;
We've seen an example of using SQL for one problem that is fundamental in economics: stable matching (with capacities).&#13;
This certainly isn't the only problem in economics, nor even the most significant business problem you'll have, but it does show off a potentially new use of recursive SQL to solve the problem.&#13;
Other problems, similar and different, have natural solutions with recursive SQL that you might not have imagined, and you wouldn't be able to access with vanilla SQL.&#13;
&#13;
&lt;!-- ##{'timestamp':1702962000}## --&gt;。</description><guid isPermaLink="true">http://nuowo.work.gd//post/Doing%20Business%20with%20Recursive%20SQL.html</guid><pubDate>Tue, 19 Dec 2023 05:00:00 +0000</pubDate></item><item><title>Responsiveness and Operational Agility</title><link>http://nuowo.work.gd//post/Responsiveness%20and%20Operational%20Agility.html</link><description>Responsiveness is one of three components of [Materialize's Trust pillar of product value](https://materialize.com/blog/operational-attributes/#trust), the other two being [freshness](https://materialize.com/blog/freshness/) and [consistency](https://materialize.com/blog/operational-consistency/).&#13;
While being fresh and consistent is fundamental, operational work suffers if each intervention is a 15 minute deployment away.&#13;
We all want to live in world where our operational logic is fully baked, but the reality is that things change and interactivity matters.&#13;
Moreover, operational work is often inherently interactive: responding to user or operator queries that are not known ahead of time.&#13;
For these reasons, among others, systems must be responsive to be a trustworthy part of your operational layer.&#13;
&#13;
Different architectures have different visions for how work gets done, which leads to different responsiveness characteristics.&#13;
The conventional cloud data warehouse pulls stale data from cloud storage and re-evaluates your query, each time from scratch and at some cost.&#13;
Dataflow engines generally re-flow the streams that define their inputs, which happens at high throughput but still takes time to cover the volume of data.&#13;
Caches and microservices generally nail responsiveness, though without much to say about consistency or freshness.&#13;
The caveats make none of these alternatives especially satisfying.&#13;
&#13;
Responsiveness is about more than just promptly providing a response: the response needs to be valuable and actionable.&#13;
Systems can trivially respond with inconsistent, stale, or unhelpful results ('nothing yet, boss'), but we understand that this doesn't yet provide value.&#13;
They can promptly respond to interventions with confirmation of initiation ('just starting, boss'), but this doesn't mean any work will soon be done.&#13;
Responsiveness provides value when the response has meaning, which we believe is captured by consistency and freshness (which is why we covered them first!).&#13;
A responsive system must promptly provide a *meaningful* response; otherwise it is just entertainment.&#13;
&#13;
In this post we'll dive into how Materialize makes commands responsive, from the structure it exploits in both data and queries, through the technical underpinnings, up to an example of responsive, fresh, and consistent results for non-trivial operational work involving multi-way joins.&#13;
&#13;
## Responsiveness in Materialize&#13;
&#13;
In Materialize, responsiveness is about minimizing the time between an issued command and Materialize's consistent, fresh responses (to the operator, or to downstream consumers).&#13;
&#13;
Achieving responsiveness is about much more than just programming hard to make computers go fast. &#13;
It is about preparing and organizing information ahead of time so that when commands arrive we have the answers (nearly) at hand.&#13;
When `SELECT` commands arrive, from easy `LIMIT 1`s to hard multi-way `JOIN`s, we want to minimize the time required before Materialize can provide the result.&#13;
When users create indexes, materialized views, and sinks, we want to minimize the time before those assets are operational.&#13;
In each case, we want to identify and exploit structure in the data and the commands to make subsequent work fast.&#13;
&#13;
We also try to program rly hard, but the gains really come from the preparation instead.&#13;
&#13;
&#13;
&#13;
&lt;!-- ##{'timestamp':1696914000}## --&gt;。</description><guid isPermaLink="true">http://nuowo.work.gd//post/Responsiveness%20and%20Operational%20Agility.html</guid><pubDate>Tue, 10 Oct 2023 05:00:00 +0000</pubDate></item><item><title>Freshness and Operational Autonomy</title><link>http://nuowo.work.gd//post/Freshness%20and%20Operational%20Autonomy.html</link><description>&#13;
Freshness is one of three components of [Materialize's Trust pillar of product value](https://materialize.com/blog/operational-attributes/#trust), the other two being responsiveness and [consistency](https://materialize.com/blog/operational-consistency/).&#13;
Operational work is fundamentally about promptly reacting to and reflecting events in the real world. &#13;
And the real world, famously, waits for no one.&#13;
Every moment your operational layer isn't up to date represents missed opportunity as the real world moves on.&#13;
&#13;
And believe it or not, staying up to date is only the tip of the operational iceberg.&#13;
&#13;
Materialize uses SQL not only to query the present, but also to describe how it should respond to future events.&#13;
Your operational work shifts from being a repeated sequence of imperative SQL commands to declarative SQL views that describe your business logic.&#13;
This allows Materialize to accept responsibility for ongoing operational work, and to act autonomously where appropriate.&#13;
And it allows *you* to declaratively specify much of your operational layer, avoiding a tangle of scripts, cron jobs, and baling twine.&#13;
&#13;
In this post we'll unpack how Materialize views freshness, see how it introduces autonomy at different moments, and call out the work you currently do that it can do for you instead.&#13;
We'll build up to an end-to-end demonstration borrowing from our [guided tutorial](https://materialize.com/docs/get-started/quickstart/).&#13;
&#13;
## Freshness in Materialize&#13;
&#13;
At the heart of freshness in Materialize is autonomous proactive work, done in response to the arrival of data rather than waiting for a user command.&#13;
User commands still exist, and Materialize promptly responds to them too, but many of the commands set up ongoing work rather than one-off work.&#13;
The proactive ongoing work spans data ingestion, view and index maintenance, and onward streaming outputs.&#13;
All of this work aims to minimize the time from data updates to their reflection in indexes (for querying) and output streams (for action).&#13;
&#13;
In addition to acting proactively, we need to carefully consider the work we choose to do.&#13;
One can't simply re-do all work on each data update; we'll end up continually behind rather than at all ahead.&#13;
Ideally, we would do the *same* work as for batch processing, only performed eagerly (as the updates arrive) rather than lazily (once the batch completes).&#13;
This principle ensures that we remain throughput-competitive with batch systems, while minimizing the latency for data updates.&#13;
&#13;
Let's examine the proactive work across Materialize's ingestion, computation, and output layers.&#13;
&#13;
### Autonomy in Ingestion&#13;
&#13;
Materialize draws input data from [sources](https://materialize.com/docs/sql/create-source/): tables maintained by external systems that Materialize should faithfully reflect.&#13;
Examples include PostgreSQL databases (through their replication log) and Kafka topics.&#13;
Materialize continually monitors these external systems, and receives data updates the first moment the systems make them available.&#13;
&#13;
As Materialize receives data updates it timestamps them and commits them to its own durable storage.&#13;
The storage layer uses an append-friendly changelog format that does not need to rewrite existing data.&#13;
Log compaction happens in the background, off of the critical path and without impeding data ingestion.&#13;
Updates are available to users and their uses as soon as the timestamped data are durably committed to the OLTP database containing Materialize's storage metadata.&#13;
&#13;
This ongoing work pulls data in as soon as Materialize has access to it, and attempts to do as little as possible to make it durable and then reveal it to users.&#13;
The result is continual freshness of ingested data, always as current as upstream systems have presented it.&#13;
&#13;
### Autonomy in Computation&#13;
&#13;
Many operational systems record data updates promptly, and then invite you to query it.&#13;
While useful, that invitation stops short of any consequent operational work that needs to be done.&#13;
If you have business logic that depends on those changed data, you'd really like to see the changes in the *outputs* rather than the *inputs*.&#13;
You'd like someone to *maintain* your business logic for you.&#13;
&#13;
Materialize's maintenance of views and indexes is driven by [differential dataflow](https://github.com/TimelyDataflow/differential-dataflow), a compute engine specifically designed to minimize the end-to-end latency of data updates.&#13;
Differential dataflow provides carefully implemented data-parallel operators (e.g. `map`, `reduce`, `join`) and Materialize translates your SQL into a dataflow of these operators.&#13;
To read more about the implementation of these atomic operators, and the properties of differential dataflow generally, we recommend [the VLDB paper on Shared Arrangements](http://www.vldb.org/pvldb/vol13/p1793-mcsherry.pdf).&#13;
&#13;
Even with differential dataflow, Materialize needs to carefully construct dataflows to ensure that updates happen both promptly and efficiently.&#13;
A not-uncommon pattern in other systems with shallower incremental view maintenance (IVM) support is that they fall back to expensive implementations when queries stray outside of the range of SQL the system's IVM supports.&#13;
Materialize uses the same engine to both evaluate queries and to incrementally maintain them, so it doesn't have exceptions to its IVM support.&#13;
&#13;
Let's look at three examples of SQL that can be challenging to maintain in other systems: supporting updates and deletions, correlated subqueries, and recursion.&#13;
&#13;
SQL aggregations `MIN` and `MAX` are not hard to maintain incrementally when you only insert data, but life gets much harder when you update or delete input data.&#13;
Your continued deletions (imagine implementing a priority queue) can eventually make any input record become the correct answer.&#13;
Materialize ensures this happens both correctly and promptly by performing aggregation in a tree, and leaving this tree structure behind as the state to maintain. &#13;
The same construction applies equally well to maintaining views containing `ORDER BY .. LIMIT ..` clauses.&#13;
&#13;
```sql&#13;
-- You can *retract* arbitrary rows from `input_tbl`,&#13;
-- and can make any input row become the correct answer.&#13;
SELECT key_col, MIN(col1), MAX(col2), ..&#13;
FROM input_tbl&#13;
GROUP BY key_col;&#13;
```&#13;
When `input_tbl` is append-only, either because its source is append-only or because this is a one-off query, Materialize is able to use the leaner implementation that keeps only the results for each `key_col`.&#13;
When `input_tbl` can change arbitrarily, Materialize prepares to minimize the update time for any changes, including retractions.&#13;
&#13;
SQL has the concept of 'correlated subquery' which behave as if you you were to issue a new query for each record in some table.&#13;
Similarly, SQL's `LATERAL` join keyword allows you to manually correlate subqueries. &#13;
For example, &#13;
```sql&#13;
SELECT * FROM&#13;
    input_tbl,&#13;
    LATERAL (&#13;
        -- As if re-queried for each row in `input_tbl`.&#13;
        SELECT col1, col2... FROM other_tbl&#13;
        WHERE other_tbl.key_col = input_table.key_col&#13;
          AND other_tbl.val_col &gt; input_table.val_col&#13;
        ORDER BY other_tbl.ord_col LIMIT k&#13;
    )&#13;
```&#13;
Materialize rewrites all queries to be free of subqueries in a process called decorrelation ([described here by Neumann and Kemper](https://cs.emis.de/LNI/Proceedings/Proceedings241/383.pdf)).&#13;
This way, Materialize is able to incrementally maintain arbitrary correlated subqueries.&#13;
&#13;
SQL allows you to write recursive queries with `WITH RECURSIVE`.&#13;
This powerful construct is often vexxing, and we are unaware of other systems that are able to incrementally maintain anything like it for general queries.&#13;
Fortunately, differential dataflow supports recursive natively, and Materialize supports incremental evaluation and maintenance through its (slightly different) [`WITH MUTUALLY RECURSIVE`](https://materialize.com/docs/sql/recursive-ctes/#details) construct.&#13;
&#13;
Not all of Materialize's dataflows are flawless.&#13;
Window functions in particular are challenging to support in their full generality, as they allow rich computation and aren't as easily eliminated as are correlated subqueries.&#13;
However they, like any other limitations, are being actively pursued and should only improve!&#13;
&#13;
Although there is a lot to know here, Materialize's computation layer is continually working to maintain your SQL views and indexes as the underlying data change.&#13;
This is all in pursuit of freshness, pushing data updates through business logic proactively, both to be ready with fresh indexed results and to communicate them onward.&#13;
&#13;
### Autonomy in Query Serving&#13;
&#13;
The most common mode of interaction with a SQL system, the `SELECT` query, isn't great from the perspective of freshness.&#13;
You are required to repeatedly ask the system for results, and when there is a change you need to be the one to notice it.&#13;
&#13;
Materialize adds a new command, [`SUBSCRIBE`](https://materialize.com/docs/sql/subscribe/), which like `SELECT` gives you the answer to your query, but then continues with a stream of timestamped updates that tell you about changes to those results as soon as they happen.&#13;
The `SUBSCRIBE` command allows you to build fresh applications without continually hammering the systems with polling `SELECT` statements.&#13;
&#13;
Materialize also has the concept of a [SINK](https://materialize.com/docs/sql/create-sink/), which is roughly the output complement to an input `SOURCE`: it pushes the information of a `SUBSCRIBE` on to an external system, such as a Kafka topic.&#13;
Downstream systems can listen to these sinks to see updates to maintained views as soon as they happen.&#13;
&#13;
Let's see `SUBSCRIBE` in action, using an example from our [guided tutorial](https://materialize.com/docs/get-started/quickstart/). &#13;
Specifically, we'll head to ['Step 3: See results change!'](https://materialize.com/docs/get-started/quickstart/#step-3-see-results-change), in case you'd like to follow along.&#13;
In this example we have a large, continually changing view `winning_bids` of auction winners, some of which may correspond to fraudulent accounts.&#13;
We introduce a new table on the side, `fraud_accounts`, and want to monitor the top non-fraudent auction winners, written&#13;
```sql&#13;
SUBSCRIBE TO (&#13;
  SELECT buyer, count(*)&#13;
  FROM winning_bids&#13;
  WHERE buyer NOT IN (SELECT id FROM fraud_accounts)&#13;
  GROUP BY buyer&#13;
  ORDER BY 2 DESC LIMIT 5&#13;
);&#13;
```&#13;
We can look at the output and take any of the top buyers and (perhaps unfairly) flag them as fraudulent by inserting them into `fraud_accounts`.&#13;
 Perhaps we investigate and clear them, then deleting them from `fraud_accounts`. &#13;
 Each action results in an immediate update to the `SUBSCRIBE` output.&#13;
The example demonstrates each of the layers, ingesting updates promptly from both tables and sources, moving the updates through an `ORDER BY .. LIMIT` dataflow with a (non-correlated) subquery, and surfacing output updates as soon as they occur.&#13;
&#13;
The `SUBSCRIBE` and `SINK` constructs allow Materialize to serve fresh results as soon as they happen.&#13;
Users and applications are not required to anticipate changes, nor poll the system on a tight cadence.&#13;
&#13;
## Freshness and Operational Autonomy&#13;
&#13;
An operational layer wants to be able to connect the dots from input updates and events, through business logic, on to downstream systems that can take the appropriate actions.&#13;
To achieve this one must build autonomy into each of the layers of ingestion, computation, and serving.&#13;
If any of these layers aren't fully autonomous, you or code acting on your behalf will have to poke them into action on some regular basis.&#13;
You'll also likely be responsible for interpreting the results and determining if they merit propagating onward.&#13;
&#13;
Materialize specifically allow you to install operational business logic that keeps its results up to date and allows others to take action the moment results change.&#13;
It does this by making its internal components update autonomously and proactively, as updates to data occur.&#13;
Materialize can absorb end-to-end responsibility for this operational work, framed as SQL views.&#13;
&#13;
If freshness and operational autonomy sound exciting to you, we invite you to try out Materialize for yourself.&#13;
Our [guided tutorial](https://www.materialize.com/docs/get-started/quickstart/) builds up the auction data sources described above, and includes demonstrations of consistency.&#13;
If you'd like to try out Materialize on larger volumes of your own data, reach out about doing a [Proof of Concept](https://materialize.com/trial/) with us!&#13;
&#13;
&lt;!-- ##{'timestamp':1695963600}## --&gt;。</description><guid isPermaLink="true">http://nuowo.work.gd//post/Freshness%20and%20Operational%20Autonomy.html</guid><pubDate>Fri, 29 Sep 2023 05:00:00 +0000</pubDate></item><item><title>Consistency and Operational Confidence</title><link>http://nuowo.work.gd//post/Consistency%20and%20Operational%20Confidence.html</link><description>&#13;
Consistency is one facet of Materialize's 'Trust' pillar, the others being responsiveness and freshness.&#13;
It turns out that being super responsive and ultra fresh doesn't amount to much if the results don't make any sense.&#13;
The last thing you need in your operational data plane is a layer that introduces chaos and confusion, even if it is fast and scalable.&#13;
*Especially* if it is fast and scalable.&#13;
&#13;
Many popular platforms ultimately bring weak consistency properties.&#13;
We've discussed in [our product principles post](https://materialize.com/blog/operational-attributes/) how caches and bespoke microservices are one way to get both responsiveness and freshness, but at the expense of consistency.&#13;
But even internally consistent platforms, like some stream processors and data warehouses, often end up wrapped in caches and serving layers for operational work. &#13;
Their consistency properties largely go out the window at that point, and it becomes your job to make sure that these systems operate as intended.&#13;
&#13;
At Materialize we believe consistency is at the heart of the value that a database provides.&#13;
The *order* that a database introduces is why you use one, rather than a heap of JAR files pointed at various Kafka topics.&#13;
For those of you with a heap of JAR files and Kafka topics, this post is for you.&#13;
&#13;
Informally, consistency speaks to Materialize *appearing* to simply process commands and events in the order they happen in the real world.&#13;
While the reality is that no scalable data platform does anything nearly so simple, responsible platforms don't let that become your problem.&#13;
Materialize is a responsible platform, and it opts you in to the strongest consistency guarantees we know of: [strict serializability](https://jepsen.io/consistency/models/strict-serializable).&#13;
Although powerful, these database guarantees needs to be extended from command-response operation (pull) to streaming operation (push), as Materialize supports both concurrently.&#13;
&#13;
In this post we will unpack Materialize's consistency guarantees, show them happening in a [playground environment](https://materialize.com/register/), and help you probe and evaluate the consistency properties of other tools you may be using for your operational work.&#13;
&#13;
&#13;
### Consistency a la Databases&#13;
&#13;
Ironically perhaps, the term 'consistency' means many different things to folks in the databases, distributed systems, and big data spaces.&#13;
For a helpful introduction I recommend [the Jepsen page on consistency models](https://jepsen.io/consistency).&#13;
The tl;dr there is that [strict serializable](https://jepsen.io/consistency/models/strict-serializable) is what you wish were the case: all interactions are applied in an order that tracks the order they happened in the real world.&#13;
The other, weaker models introduce semantic anomalies in the interest of avoiding performance anomalies (up to and including database unavailability).&#13;
That doesn't mean the other models are inherently bad, but they are certainly spookier and require more expertise on your part.&#13;
&#13;
Materialize supports both [strict serializable]((https://jepsen.io/consistency/models/strict-serializable)) and [serializable](https://jepsen.io/consistency/models/serializable) operation.&#13;
Serializability still requires interactions be applied in some order, but the order doesn't need to match the real world;&#13;
for example, you could be served stale results in order to see them faster than if you waited for the results to catch up to their fresh inputs.&#13;
We start you off with strict serializability so that you aren't surprised by the apparent mis-orderings of (non-strict) serializability, and then teach you about the latter if you believe you need to squeeze more performance out of Materialize and can absorb the potential confusion.&#13;
&#13;
However, definitions like strict serializability and serializability only apply to systems that accept commands and provide responses.&#13;
There are other dimensions to consistency as we move into the world of streamed inputs, maintained views, and streamed outputs.&#13;
Let's dive into those now!&#13;
&#13;
### Consistency in Materialize&#13;
&#13;
Although Materialize fits the mold of an interactive SQL database, and provides the guarantees of one, it has additional streaming touchpoints.&#13;
Input data can be provided by external sources like Kafka and Postgres, which do not 'transact' against Materialize.&#13;
Materialized views are kept always up to date, as if they are refreshed instantaneously on each data update.&#13;
Output data can be provided to external sinks like Kafka, as streams of events rather than sequences of transactions.&#13;
We need to speak clearly about how Materialize's consistency guarantees integrate with these features.&#13;
&#13;
These three concerns lie at the heart of an operational data warehouse, whose outputs and actions must faithfully represent business logic applied to their inputs.&#13;
Without this guarantee, it is not entirely clear what an operational platform will and will not do on your behalf.&#13;
&#13;
---&#13;
&#13;
Although things sound like they might be about to get more complicated, I think they actually get *easier*, by getting more specific about how we maintain consistency in Materialize.&#13;
&#13;
Materialize uses a concurrency control mechanism called [Virtual Time](https://materialize.com/blog/virtual-time-consistency-scalability/).&#13;
Every command and data update get assigned a virtual timestamp, and then Materialize applies these operations in the order of these timestamps. &#13;
Although there is some subtlety to how we *assign* the timestamps to operations, once that step is done the system behaves in what we think is an largely unsurprising and thoroughly consistent manner.&#13;
Not only will Materialize behave as if all operations happen in *some* order, as required by serializability, *we can even show you what that order is*.&#13;
&#13;
---&#13;
&#13;
Properly prepared, let's now dive in to each of the three concerns above, which I'll call here input consistency, internal consistency, and output consistency.&#13;
&#13;
&#13;
#### Input Consistency&#13;
&#13;
Materialize draws streamed input data from external sources, like Kafka and PostgreSQL.&#13;
Ideally, Materialize would assign timestamps to updates that exactly track the moments of change in the upstream data.&#13;
In practice, these sources are often insufficiently specific about their changes, and Materialize instead 'reclocks' their sequence of states into its own virtual time.&#13;
When it does so, it assigns timestamps that aim to be consistent with the source itself.&#13;
&#13;
Materialize durably records its timestamp assignment in auxiliary sources, as changing collections that at each time record the progress through the source so far.&#13;
&#13;
PostgreSQL sources move forward using a 'log sequence number', and you can see the current time and current log sequence number with the following query, where `pg_source_progress` just happened to be the name of the progress source.&#13;
```&#13;
materialize=&gt; select mz_now(), * from pg_source_progress;&#13;
        mz_now |         lsn&#13;
---------------+-------------&#13;
 1695659907060 | 11695622984&#13;
(1 row)&#13;
```&#13;
&#13;
Kafka is more complicated. Each topic is comprised of an unbounded number of partitions, each of which moves forward through integer offsets. &#13;
Rather than a single `lsn`, each time has an association between partition ids and offsets, including a `0` for all partitions that have not yet come into existence.&#13;
The selection reports not a single number, but an offset for ranges of partitions.&#13;
```&#13;
materialize=&gt; select mz_now(), * from kafka_source_progress;&#13;
        mz_now | partition |   offset&#13;
---------------+-----------+----------&#13;
 1695659699912 |     [0,0] | 40166616&#13;
 1695659699912 |     [1,1] | 40781940&#13;
 1695659699912 |     [2,2] | 40472272&#13;
 1695659699912 |      (2,) |        0&#13;
(4 rows)&#13;
```&#13;
&#13;
When Materialize reclocks these sources into its own timestamps, it aims to maintain consistency with the inputs.&#13;
Specifically, it maintains the order of events in the underlying sources, it respects transaction boundaries when it is aware of them, and it could (but currently does not) transact against the upstream source to ensure that all writes are immediately visible.&#13;
Let's explore each of these properties.&#13;
&#13;
Most streamed sources have a notion of order, in some cases a total order like PostgreSQL's replication log, and in some cases a weaker order like Kafka's partitioned topics.&#13;
Materialize's timestamp assignment should (and does) respect this order, so that you see a plausible database state.&#13;
Materialize records for each virtual timestamp the coordinates in the input order that describe the subset of data available at that timestamp. &#13;
A new data update is assigned the first timestamp whose coordinates contain the update.&#13;
As long as the recorded coordinates move forward along the order as times increase, the revealed states of the data also move forward following the order.&#13;
&#13;
For PostgreSQL we can verify that repeated inspection of the progress source shows an advancing timestamp and an advancing log sequence number.&#13;
```&#13;
materialize=&gt; select mz_now(), * from pg_source_progress;&#13;
        mz_now |         lsn&#13;
---------------+-------------&#13;
 1695659907060 | 11695622984&#13;
(1 row)&#13;
materialize=&gt; select mz_now(), * from pg_source_progress;&#13;
        mz_now |         lsn&#13;
---------------+-------------&#13;
 1695659910061 | 11695624104&#13;
(1 row)&#13;
materialize=&gt; select mz_now(), * from pg_source_progress;&#13;
        mz_now |         lsn&#13;
---------------+-------------&#13;
 1695659911994 | 11695624568&#13;
(1 row)&#13;
```&#13;
&#13;
Many streamed sources reveal transactional boundaries, such as PostgreSQL's replication log.&#13;
Kafka itself supports 'transactional writes' but does not reveal the transaction boundaries to readers; you would need to use Debezium configured with a transaction topic to provide transaction information with it.&#13;
For PostgreSQL, Materialize assigns identical timestamps to all updates associated with the same transaction.&#13;
This ensures that other operations either see all or none of the updates in any transaction.&#13;
&#13;
Finally, having written something to an upstream system (and received confirmation) you might like to be certain it is now available and reflected in Materialize.&#13;
This can be achieved by transacting against the upstream system for each timestamp we produce, but is not currently done by Materialize.&#13;
We think we should do it, however, and you should expect systems that can provide this level of fidelity to external data sources.&#13;
&#13;
Timestamp assignment is the moment Materialize introduces order to its often inconsistent sources of data. &#13;
It is also the moment we are able to be precise about the consistency properties we are able to maintain, and which we will need to invent.&#13;
&#13;
#### Internal Consistency&#13;
&#13;
Materialize has streaming internals, and uses them to continually keep various materialized views up to date.&#13;
Even with careful timestamps on input updates, with all the updates in motion through the streaming internals there is the real possibility that Materialize might reveal inconsistent results.&#13;
Inconsistent or transiently incorrect results are unacceptable for operational work; at best you have to stall your operational plane to sort things out, and at worst you may take irrevocable incorrect actions.&#13;
&#13;
Many stream processors have the baffling property that their outputs need not correspond to any specific input.&#13;
This comes under the name of [eventual consistency](https://en.wikipedia.org/wiki/Eventual_consistency), which allows systems to be transiently incorrect as long as their inputs continue to change.&#13;
Inputs change pretty much always for stream processors, that's why you use them, leaving several popular systems with no specific consistency properties.&#13;
For an excellent overview, [Jamie Brandon's post on 'internal consistency'](https://www.scattered-thoughts.net/writing/internal-consistency-in-streaming-systems/) evaluates this property for ksqlDB, Flink's Table API, and Materialize (and finds chaos in the non-Materialize entrants).&#13;
&#13;
Materialize continually produces **specific** and **correct** outputs for its timestamped inputs.&#13;
Anything else is a bug.&#13;
&#13;
We can see this in a playground environment using a query like Jamie used in his post.&#13;
Our [guided tutorial](https://materialize.com/docs/get-started/quickstart/) sets up a source of auction transactions, with buyers and sellers and bids.&#13;
Although many things change continually, we would hope that the sum of all credits through sales match the sum of all debits through sales.&#13;
They should always be exactly identical, and if even for a moment they are not that would be a bug in Materialize.&#13;
&#13;
```sql&#13;
-- Maintain the credits due to each account.&#13;
CREATE MATERIALIZED VIEW credits AS&#13;
SELECT seller, SUM(amount) AS total&#13;
FROM winning_bids&#13;
GROUP BY seller;&#13;
&#13;
-- Maintain the credits owed by each account.&#13;
CREATE MATERIALIZED VIEW debits AS&#13;
SELECT buyer, SUM(amount) AS total&#13;
FROM winning_bids&#13;
GROUP BY buyer;&#13;
&#13;
-- Maintain the net balance for each account.&#13;
CREATE VIEW balance AS&#13;
SELECT &#13;
    coalesce(seller, buyer) as id, &#13;
    coalesce(credits.total, 0) - coalesce(debits.total, 0) AS total&#13;
FROM credits FULL OUTER JOIN debits ON(credits.seller = debits.buyer);&#13;
&#13;
-- This will always equal zero.&#13;
SELECT SUM (total) FROM balance;&#13;
```&#13;
&#13;
Importantly, nothing about the above example relies on the views being created in the same session, by the same person, team, or even running on the same physical hardware.&#13;
Materialize will ensure that `credits`, `debits`, and `balance` always track exactly the correct answer for the timestamped input, and will always have a net balance of zero.&#13;
&#13;
To assess internal consistency for systems, Materialize and others, it can help to write views that track *invariants* of your data. &#13;
If there is something you know should always hold, for example that the net balances are zero, then you can observe the results and watch for a result that violates the invariant.&#13;
&#13;
You can similarly be certain that when you see a result that it corresponds to the correct answer on a specific input. &#13;
For example, if you want to notify those users whose balance is below 100, the following view is certain to only report users for which it *actually happened*.&#13;
&#13;
```sql&#13;
SELECT mz_now(), * FROM balance WHERE total &lt; -100&#13;
```&#13;
&#13;
The `mz_now()` column will report the exact time at which the input data yielded a low balance.&#13;
&#13;
All results Materialize produces are the specific answers to the query on the input data as it existed at the query time.&#13;
&#13;
#### Output Consistency&#13;
&#13;
Finally, having both ingested and maintained results, Materialize needs to speak clearly about its results to external systems.&#13;
We saw just above that a `SELECT` query can use `mz_now()` to learn the specific moment at which query results were correct.&#13;
However, the full power of Materialize unlocks when you connect its views as streaming outputs onward to downstream applications or systems.&#13;
How does Materialize speak clearly and unambiguously to these streaming consumers?&#13;
&#13;
Materialize connects to three different types of downstream consumer, but as we will see it follows identical principles for each.&#13;
Materialize can return streamed changelogs for views in a standard SQL session using its [`SUBSCRIBE`](https://materialize.com/docs/sql/subscribe/) command.&#13;
It can also stream those same changelogs on to external systems, like Kafka and RedPanda, using its [`CREATE SINK`](https://materialize.com/docs/sql/create-sink/) command.&#13;
Finally, Materialize also commonly writes data back to *itself*, to fan out to other users and uses, through its [`CREATE MATERIALIZED VIEW`](https://materialize.com/docs/sql/create-materialized-view/) command.&#13;
Although different types of endpoints, all three communicate the same information: exactly what changed in a view and exactly when did those changes happen.&#13;
&#13;
To communicate clearly Materialize follows certain rules for its changelogs.&#13;
Each changelog begins at a specific timestamp with the collection snapshot at that timestamp.&#13;
Each record changes only once for each timestamp, and that timestamp is explicitly recorded with the change.&#13;
Each timestamp is regularly indicated to be complete, even when no changes occur.&#13;
These properties remove ambiguity about what the changes were, when they happened, and whether there are any more coming for any given timestamp.&#13;
&#13;
Let's take a peek using the `SUBSCRIBE` command, simply watching the count of the number of auctions that have been won.&#13;
&#13;
```&#13;
materialize=&gt; copy (&#13;
    subscribe (select count(*) from winning_bids) &#13;
         with (progress = true)&#13;
) to stdout;&#13;
```&#13;
&#13;
I pressed `ENTER` between blocks of returned results to suggest at the live experience, and added comments to these lines that describe the *preceding* block of responses.&#13;
&#13;
```&#13;
1695653291958	t	\N	\N&#13;
-- Timestamp of initial snapshot&#13;
1695653291958	f	1	38549&#13;
1695653293090	f	-1	38549&#13;
1695653293090	f	1	38550&#13;
1695653298001	t	\N	\N&#13;
-- Initial snapshot and immediate change&#13;
1695653299001	t	\N	\N&#13;
1695653299105	t	\N	\N&#13;
1695653299105	f	-1	38550&#13;
1695653299105	f	1	38551&#13;
1695653300001	t	\N	\N&#13;
-- Brief break before next change&#13;
1695653301001	t	\N	\N&#13;
1695653302001	t	\N	\N&#13;
1695653303001	t	\N	\N&#13;
...&#13;
-- Nothing happens for a while.&#13;
```&#13;
&#13;
The columns of each returned row are: first the timestamp in milliseconds since 1970, second 'is this a watermark', third the change in the cardinality of the record, and finally the payload columns of the record itself.&#13;
Watermark records indicate only the forward progress of times, that all future timestamps will be at least so large, and have null values for columns other than the timestamp.&#13;
&#13;
There are four blocks of output to unpack.&#13;
1. The first and immediate block of output is the 'initial snapshot timestamp' progress message, which tells us the time the initial snapshot of the `SUBSCRIBE` will reflect.&#13;
2. The second block of output includes the snapshot first. As the snapshot requires spinning up a dataflow (`winning_bids` is a non-materialized view), some additional input changes happen before we have the snapshot, and we report their output changes as well.&#13;
3. The next block is now live and reports a new update just as it happens, from `38550` to `38551`, and confirms that there are no further changes at that time.&#13;
4. The last block reports multiple seconds proceeding for which the count does not change.&#13;
&#13;
These blocks each report the correct `COUNT(*)` output at the exact times the inputs change. &#13;
Materialize will wait until it is certain of the exact updates for a time, including that they are durably committed, before reporting them.&#13;
&#13;
Although other destinations differ from `SUBSCRIBE`, each have access to an ongoing stream of precise information detailing exactly what changed, when it changed, and whether more changes are due.&#13;
This information communicates to consumers the moment a change has certainly occurred, giving them the confidence to act immediately.&#13;
&#13;
## Consistency and Operational Confidence&#13;
&#13;
Consistency is critical on operational workflows because there are actions that need to be taken.&#13;
Many of these actions have consequences, and if they are directly driven by an inconsistent platform it is up to you to diagnose and debug any resulting glitchy behavior.&#13;
These glitches have consequences too, some of which can be corrected after the fact and some of which cannot.&#13;
Operational platforms provide value in part by introducing and maintaining consistency for you, avoiding unintended actions and their consequences.&#13;
&#13;
Materialize specifically provides strict serializability, and extends this to its streaming ingestion, transformation, and onward communication.&#13;
This guarantee means Materialize behaves *as if* it applied all commands in an order that matches how they happened in the real world.&#13;
In reality Materialize is massively concurrent, but it absorbs this complexity and presents as a surprisingly capable single operator.&#13;
&#13;
If this resonates with you, especially if you have heaps of JAR files and Kafka topics, we invite you to try out Materialize for yourself.&#13;
Our [guided tutorial](https://www.materialize.com/docs/get-started/quickstart/) builds up the auction data sources described above, and includes demonstrations of consistency.&#13;
If you'd like to try out Materialize on larger volumes of your own data, reach out about doing a [Proof of Concept](https://materialize.com/trial/) with us!&#13;
&#13;
&lt;!-- ##{'timestamp':1695099600}## --&gt;。</description><guid isPermaLink="true">http://nuowo.work.gd//post/Consistency%20and%20Operational%20Confidence.html</guid><pubDate>Tue, 19 Sep 2023 05:00:00 +0000</pubDate></item></channel></rss>